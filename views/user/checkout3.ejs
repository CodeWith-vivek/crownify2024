<%- include("../../views/partials/user/headercheckout") %>

    <section class="breadcrumb-option">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="breadcrumb__text">
                        <h4>Check Out</h4>
                        <div class="breadcrumb__links">
                            <a href="/">Home</a>
                            <a href="/shop">Shop</a>
                            <span>Check Out</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section class="checkout spad">
        <div class="container">
            <div class="checkout__form">
                <form id="checkoutForm" action="/checkout" method="POST">
                    <div class="row">
                        <div class="col-lg-7 col-md-5">
                            <% if (addresses.length===0) { %>
                                <h2>No address added yet.</h2>
                                <% } else { %>
                                    <% addresses.forEach(address=> { %>
                                        <div class="card mb-3 mb-lg-3">
                                            <div class="card-header d-flex justify-content-between align-items-center"
                                                style="background-color: #cf8484;">
                                                <h5 class="mb-0">Address</h5>
                                                <% if (address.isPrimary) { %>
                                                    <span class="badge bg-success"
                                                        style="margin-right: 23px; color:white; background-color: #703535 !important;">Primary</span>
                                                    <% } %>
                                            </div>
                                            <div class="card-body">
                                                <address>
                                                    <%= address.fullName %><br>
                                                        <%= address.flatHouseCompany %>, <%= address.areaStreet %><br>
                                                                <%= address.city %>, <%= address.state %> - <%=
                                                                            address.postalCode %><br>
                                                                            <%= address.mobileNumber %><br>
                                                </address>
                                                <div class="d-flex justify-content-between">
                                                    <% if (!address.isPrimary) { %>
                                                        <a href="#" class="btn-small btn-link"
                                                            onclick="confirmPrimaryAddress(event, '<%= address._id %>')">
                                                            Set as Primary
                                                        </a>

                                                        <% } %>
                                                            <a href="#" class="btn-small btn-link edit-address-btn"
                                                                data-bs-toggle="modal"
                                                                data-bs-target="#editAddressModal"
                                                                data-id="<%= address._id %>"
                                                                data-addresstype="<%= address.addressType %>"
                                                                data-fullname="<%= address.fullName %>"
                                                                data-country="<%= address.country %>"
                                                                data-phone="<%= address.mobileNumber %>"
                                                                data-pincode="<%= address.postalCode %>"
                                                                data-home="<%= address.flatHouseCompany %>"
                                                                data-area="<%= address.areaStreet %>"
                                                                data-landmark="<%= address.landmark %>"
                                                                data-town="<%= address.city %>"
                                                                data-state="<%= address.state %>">
                                                                <i class="fas fa-edit"></i> Edit
                                                            </a>

                                                            <a href="#" class="btn-small btn-link text-danger"
                                                                onclick="confirmDeleteAddress(event, '<%= address._id %>')">
                                                                <i class="fas fa-trash"></i> Delete
                                                            </a>
                                                </div>
                                            </div>
                                        </div>
                                        <% }); %>
                                            <% } %>
                                                <!-- Common Add Address Button -->
                                                <a class="btn btn-primary"
                                                    style="width: 150px; background-color: #703535; margin-left: 20px; color: rgb(251, 251, 251);"
                                                    data-bs-toggle="modal" data-bs-target="#addressModal">Add
                                                    Address</a>
                        </div>
                        <div class="col-lg-5 col-md-7">
                            <div style="    margin-left: 20px;
                                                                                          
                                                                                            padding-top: 28px;
                                                                                            padding-bottom: 28px;">
                                <div class="cart__discount" style="margin-bottom: 20px;">
                                    <h6>Discount codes</h6>
                                <form id="couponForm" class="form-stacked">
                                    <input type="text" placeholder="Coupon code" id="couponCodeInput">
                                    <button type="button" id="applyCouponButton"
                                        style="font-size: 14px; margin-top: 15px; color: #ffffff; font-weight: 700; letter-spacing: 2px; text-transform: uppercase; background: #111111; padding: 0 30px; width: 100%; border: none; height: 50px;">Apply</button>
                                    <button type="button" id="removeCouponButton"
                                        style="font-size: 14px; margin-top: 15px; color: #ffffff; font-weight: 700; letter-spacing: 2px; text-transform: uppercase; background: #111111; padding: 0 30px; border: none; height: 50px; width: 100%;">Remove</button>
                                </form>
                                </div>

                                <button type="button" class="btn btn-secondary" id="viewCouponsButton"
                                    data-toggle="modal" data-target="#couponsModal" style="margin-top: 20px; font-size: 14px;
                                                                                                    color: #ffffff;
                                                                                                    font-weight: 700;
                                                                                                    letter-spacing: 2px;
                                                                                                    text-transform: uppercase;
                                                                                                    background: #d51010;
                                                                                                    padding: 0 30px;
                                                                                                    border: none;
                                                                                                 
                                                                                                    border-radius: 30px;
                                                                                                  
                                                                                                    right: 0;
                                                                                                    top: 0;
                                                                                                    height: 60px;
                                                                                                    width: 100%;">View
                                    Coupons</button>
                            </div>
                            <div class="checkout__order">
                                <h4 class="order__title">Your order</h4>
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Product</th>
                                            <th>Quantity</th>
                                            <th>Price</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% products.forEach(product=> { %>
                                            <tr>
                                                <td>
                                                    <div class="product-info">
                                                        <div class="product-image">
                                                            <img src="/uploads/product-image/<%= product.productImage %>"
                                                                style="width: 50px; height: 50px; margin-right: 10px;">
                                                        </div>
                                                        <div class="product-details product-details-small">
                                                            <p><b>
                                                                    <%= product.productName %>
                                                                </b></p>
                                                            <p>
                                                                <%= product.productBrand %>
                                                            </p>
                                                            <p>
                                                                <%= product.size %>
                                                            </p>
                                                            <p>
                                                                <%= product.color %>
                                                            </p>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <input type="text" name="quantities[]"
                                                        value="<%= product.quantity %>" readonly
                                                        style="width: 50px; border: none; background: transparent;">
                                                    <input type="hidden" name="products[]"
                                                        value="<%= product.productId %>">
                                                    <input type="hidden" name="sizes[]" value="<%= product.size %>">
                                                    <input type="hidden" name="colors[]" value="<%= product.color %>">
                                                </td>
                                                <td>₹<%= product.itemTotal %>
                                                </td>
                                            </tr>
                                            <% }); %>
                                    </tbody>
                                </table>
                                <ul class="checkout__total__all">
                                    <li> Sale  Price Subtotal <span>₹<%= subtotal.toFixed(2) %></span>
                                        <input type="hidden" name="subtotal" value="<%= subtotal %>">
                                    </li>
                                    <li>Coupon Discount <span style="color: green; font-size: 14px;">₹<%=
                                                discountAmount.toFixed(2) %></span></li>
                                    <li>Shipping <span style="color: gray; font-size: 14px;">₹<%= shipping.toFixed(2) %>
                                        </span>
                                        <input type="hidden" name="shipping" value="<%= shipping %>">
                                    </li>
                                    <li>Grand Total <span>₹<%= total.toFixed(2) %></span>
                                        <input type="hidden" name="total" value="<%= total %>">
                                    </li>
                                </ul>
                                <h4 class="order__title">Payment Method</h4>
                                <div class="checkout__input__checkbox">
                                    <label for="cod-payment">
                                        <input type="radio" id="cod-payment" name="paymentMethod" value="COD">
                                        Cash On Delivery
                                        <span class="checkmark"></span>
                                    </label>
                                </div>
                                <div class="checkout__input__checkbox">
                                    <label for="razorpay-payment">
                                        <input type="radio" id="razorpay-payment" name="paymentMethod" value="RazorPay">
                                        Razor Pay
                                        <span class="checkmark"></span>
                                    </label>
                                </div>
                                <div class="checkout__input__checkbox">
                                    <label for="wallet-payment">
                                        <input type="radio" id="wallet-payment" name="paymentMethod" value="Wallet">
                                        Wallet
                                        <span class="checkmark"></span>
                                    </label>
                                </div>
                                <% if (addresses.length> 0) { %>
                                    <input type="hidden" name="primaryAddressId"
                                        value="<%= addresses.find(address => address.isPrimary)._id %>">
                                    <% } %>
                                        <button type="submit" class="site-btn">Proceed to Checkout</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </section>
    <div class="modal fade" id="addressModal" tabindex="-1" aria-labelledby="addressModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content"
                style="background-image: url('assets/images/editAddress2.png'); background-size: cover; background-position: center; background-repeat: no-repeat; backdrop-filter: blur(100px);">
                <div class="modal-header">
                    <h5 class="modal-title" id="addressModalLabel">Add New Address</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form method="post" action="/addAddress" class="signup-form" id="signform">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="addressType" style="display:block" class="form-label">Address Type:</label>
                                <select name="addressType" id="addressType" class="form-select" required>
                                    <option value="">Select Address Type</option>
                                    <option value="Home">Home</option>
                                    <option value="Office">Office</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="col-md-12 mb-3">
                                <label for="name" class="form-label">Full Name (First and Last Name)</label>
                                <input type="text" class="form-control" name="name" id="name" placeholder="Enter name">
                                <div id="error1" class="error-message"></div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="country" class="form-label">Country / Region</label>
                                <input type="text" class="form-control" name="country" id="country"
                                    placeholder="Enter your country">
                                <div id="error2" class="error-message"></div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="phone" class="form-label">Mobile Number</label>
                                <input type="text" class="form-control" name="phone" id="phone"
                                    placeholder="Enter phone number">
                                <div id="error3" class="error-message"></div>
                            </div>
                            <div class="col-md-12 mb-3">
                                <label for="pincode" class="form-label">Pincode / Zipcode</label>
                                <input type="text" class="form-control" name="pincode" id="pincode"
                                    placeholder="Enter pincode">
                                <div id="error4" class="error-message"></div>
                            </div>
                            <div class="col-md-12 mb-3">
                                <label for="home" class="form-label">Flat, House no., Company</label>
                                <input type="text" class="form-control" name="home" id="home"
                                    placeholder="Enter flat / house no">
                                <div id="error5" class="error-message"></div>
                            </div>
                            <div class="col-md-12 mb-3">
                                <label for="area" class="form-label">Area, Street</label>
                                <input type="text" class="form-control" name="area" id="area"
                                    placeholder="Enter area / street">
                                <div id="error6" class="error-message"></div>
                            </div>
                            <div class="col-md-12 mb-3">
                                <label for="landmark" class="form-label">Landmark</label>
                                <input type="text" class="form-control" name="landmark" id="landmark"
                                    placeholder="Enter landmark">
                                <div id="error7" class="error-message"></div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="town" class="form-label">Town / City</label>
                                <input type="text" class="form-control" name="town" id="town"
                                    placeholder="Enter city / town">
                                <div id="error8" class="error-message"></div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="state" class="form-label">State / Province</label>
                                <input type="text" class="form-control" name="state" id="state"
                                    placeholder="Enter state or province">
                                <div id="error9" class="error-message"></div>
                            </div>
                        </div>
                        <div class="text-center">
                            <button type="submit" class="btn btn-secondary">Add Address</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content"
                style="background-image: url('assets/images/editAddress2.png'); background-size: cover; background-position: center; background-repeat: no-repeat; backdrop-filter: blur(10px); border-radius: 15px;">
                <div class="modal-header">
                    <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form method="post" action="/update-address/" class="editAddress-form" id="editAddressForm">
                        <input type="hidden" name="id" id="editAddressId1">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="form-group">
                                    <label for="addressType1">Address Type:</label>
                                    <select name="addressType" id="addressType" required style="border-radius: 36px;">
                                        <option value="">Select Address Type</option>
                                        <option value="Home">Home</option>
                                        <option value="Office">Office</option>
                                        <option value="Other">Other</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-12 mb-3">
                                <div class="form-group">
                                    <label for="modalName">Full Name</label>
                                    <input type="text" id="modalName1" name="name" class="form-control" required>
                                    <div id="error11" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="form-group">
                                    <label for="modalCountry">Country / Region</label>
                                    <input type="text" id="modalCountry1" name="country" class="form-control">
                                    <div id="error22" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="form-group">
                                    <label for="modalPhone">Mobile Number</label>
                                    <input type="text" id="modalPhone1" name="phone" class="form-control" required>
                                    <div id="error33" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-md-12 mb-3">
                                <div class="form-group">
                                    <label for="modalPincode">Pincode / Zipcode</label>
                                    <input type="text" id="modalPincode1" name="pincode" class="form-control">
                                    <div id="error44" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-md-12 mb-3">
                                <div class="form-group">
                                    <label for="modalHome">Flat, House no., Company</label>
                                    <input type="text" id="modalHome1" name="home" class="form-control">
                                    <div id="error55" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-md-12 mb-3">
                                <div class="form-group">
                                    <label for="modalArea">Area, Street</label>
                                    <input type="text" id="modalArea1" name="area" class="form-control">
                                    <div id="error66" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-md-12 mb-3">
                                <div class="form-group">
                                    <label for="modalLandmark">Landmark</label>
                                    <input type="text" id="modalLandmark1" name="landmark" class="form-control">
                                    <div id="error77" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="form-group">
                                    <label for="modalTown">Town / City</label>
                                    <input type="text" id="modalTown1" name="town" class="form-control">
                                    <div id="error88" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="form-group">
                                    <label for="modalState">State / Province</label>
                                    <input type="text" id="modalState1" name="state" class="form-control">
                                    <div id="error99" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-md-12 text-center">
                                <div class="form-group">
                                    <button type="submit" class="btn btn-secondary submit">Update Address</button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="couponsModal" tabindex="-1" role="dialog" aria-labelledby="couponsModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="couponsModalLabel"><i class="fas fa-tags"></i> Available Coupons</h5>
                    <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body p-4">
                    <% if (coupons && coupons.length> 0) { %>
                        <div class="table-responsive">
                            <table class="table table-hover align-middle">
                                <thead class="bg-light">
                                    <tr>
                                        <th class="text-center" style="width: 20%;">Coupon Code</th>
                                        <th>Description</th>
                                        <th class="text-center" style="width: 20%;">Expiry Date</th>
                                        <th class="text-center" style="width: 20%;">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% coupons.forEach(coupon=> { %>
                                        <tr>
                                            <td class="text-center">
                                                <span class="badge badge-success" style="font-size: 1rem;">
                                                    <%= coupon.code %>
                                                </span>
                                            </td>
                                            <td>
                                                <span class="text-success font-weight-bold">
                                                    <%= coupon.description %>
                                                </span>
                                            </td>
                                            <td class="text-center text-danger font-weight-bold">
                                                <%= new Date(coupon.expiryDate).toLocaleDateString("en-US", {
                                                    year: "numeric" , month: "long" , day: "numeric" }) %>
                                            </td>
                                            <td class="text-center">
                                                <button class="btn btn-primary btn-sm px-4"
                                                    onclick="copyToClipboard('<%= coupon.code %>')">
                                                    Copy Code
                                                </button>
                                            </td>
                                        </tr>
                                        <% }); %>
                                </tbody>
                            </table>
                        </div>
                        <% } else { %>
                            <div class="alert alert-info text-center">
                                <i class="fas fa-info-circle"></i> No coupons available at the moment.
                            </div>
                            <% } %>
                </div>
                <div class="modal-footer bg-light">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal"><i class="fas fa-times"></i>
                        Close</button>
                </div>
            </div>
        </div>
    </div>
    <%- include("../../views/partials/user/footershop") %>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const editAddressModal = document.getElementById('editAddressModal');

                // Populate modal fields when it is shown
                editAddressModal.addEventListener('show.bs.modal', function (event) {
                    const button = event.relatedTarget; // Button that triggered the modal
                    console.log("Button clicked to open modal:", button);

                    const id = button.getAttribute('data-id');
                    const fullName = button.getAttribute('data-fullname');
                    const country = button.getAttribute('data-country');
                    const phone = button.getAttribute('data-phone');
                    const pincode = button.getAttribute('data-pincode');
                    const home = button.getAttribute('data-home');
                    const area = button.getAttribute('data-area');
                    const landmark = button.getAttribute('data-landmark');
                    const town = button.getAttribute('data-town');
                    const state = button.getAttribute('data-state');
                    const addressType = button.getAttribute('data-addresstype');


                    console.log("Data retrieved from button:", {
                        id,
                        fullName,
                        country,
                        phone,
                        pincode,
                        home,
                        area,
                        landmark,
                        town,
                        state,
                        addressType
                    });

                    console.log("Address Type before setting:", addressType);
                    // Update the modal's content.
                    const modalIdInput = editAddressModal.querySelector('#editAddressId1');
                    const modalNameInput = editAddressModal.querySelector('#modalName1');
                    const modalCountryInput = editAddressModal.querySelector('#modalCountry1');
                    const modalPhoneInput = editAddressModal.querySelector('#modalPhone1');
                    const modalPincodeInput = editAddressModal.querySelector('#modalPincode1');
                    const modalHomeInput = editAddressModal.querySelector('#modalHome1');
                    const modalAreaInput = editAddressModal.querySelector('#modalArea1');
                    const modalLandmarkInput = editAddressModal.querySelector('#modalLandmark1');
                    const modalTownInput = editAddressModal.querySelector('#modalTown1');
                    const modalStateInput = editAddressModal.querySelector('#modalState1');
                    const modalAddressTypeSelect = editAddressModal.querySelector('#addressType');

                    modalIdInput.value = id;
                    modalNameInput.value = fullName;
                    modalCountryInput.value = country;
                    modalPhoneInput.value = phone;
                    modalPincodeInput.value = pincode;
                    modalHomeInput.value = home;
                    modalAreaInput.value = area;
                    modalLandmarkInput.value = landmark;
                    modalTownInput.value = town;
                    modalStateInput.value = state;
                    modalAddressTypeSelect.value = addressType;
                    console.log("Address Type after setting:", modalAddressTypeSelect.value);
                    console.log("Modal fields populated with data.");
                });


                // Validation logic
                const fields = {
                    name: { id: "modalName1", error: "error11", pattern: /^[A-Za-z]+(?: [A-Za-z]+){1,2}$/, message: "Full name required" },
                    country: { id: "modalCountry1", error: "error22", pattern: /^[A-Za-z]+$/, message: "Country must only contain letters" },
                    phone: { id: "modalPhone1", error: "error33", pattern: /^\d{10}$/, message: "Phone number must be 10 digits" },
                    pincode: { id: "modalPincode1", error: "error44", pattern: /^\d{6}$/, message: "Pincode must be 6 digits" },
                    home: { id: "modalHome1", error: "error55", custom: value => value.split(' ').length >= 2, message: "Home address must be detailed" },
                    area: { id: "modalArea1", error: "error66", pattern: /^[A-Za-z0-9]+$/, message: "Area must only contain letters and numbers" },
                    landmark: { id: "modalLandmark1", error: "error77", pattern: /^[A-Za-z0-9]+$/, message: "Landmark must only contain letters and numbers" },
                    town: { id: "modalTown1", error: "error88", pattern: /^[A-Za-z]+$/, message: "Town must only contain letters" },
                    state: { id: "modalState1", error: "error99", pattern: /^[A-Za-z]+$/, message: "State must only contain letters" }
                };

                const validateField = (field, isBlur = false) => {
                    const element = document.getElementById(fields[field].id);
                    const errorElement = document.getElementById(fields[field].error);
                    const value = element.value.trim();

                    console.log(`Validating field: ${field}, value: "${value}"`);

                    let isValid = false;
                    if (value === "") {
                        errorElement.style.display = "block";
                        errorElement.innerHTML = `Please enter ${field}`;
                        console.log(`Validation failed for ${field}: empty value`);
                    } else if (fields[field].pattern && !fields[field].pattern.test(value)) {
                        errorElement.style.display = "block";
                        errorElement.innerHTML = fields[field].message;
                        console.log(`Validation failed for ${field}: value "${value}" does not match pattern`);
                    } else if (fields[field].custom && !fields[field].custom(value)) {
                        errorElement.style.display = "block";
                        errorElement.innerHTML = fields[field].message;
                        console.log(`Validation failed for ${field}: custom validation failed`);
                    } else {
                        errorElement.style.display = "none";
                        isValid = true;
                        console.log(`Validation passed for ${field}`);
                    }

                    return isValid;
                };

                for (const field in fields) {
                    const element = document.getElementById(fields[field].id);
                    element.addEventListener("input", () => {
                        console.log(`Input event on ${field}`);
                        validateField(field);
                    });
                    element.addEventListener("blur", () => {
                        console.log(`Blur event on ${field}`);
                        validateField(field, true);
                    });
                }

                document.getElementById("editAddressForm").addEventListener("submit", async (event) => {
                    event.preventDefault();
                    console.log("Form submission initiated");

                    let allValid = true;

                    for (const field in fields) {
                        const isFieldValid = validateField(field);
                        if (!isFieldValid) allValid = false;
                    }

                    if (allValid) {
                        const formData = new FormData(event.target);
                        const data = Object.fromEntries(formData.entries());
                        console.log("Form data ready for submission:", data);

                        try {
                            const response = await fetch(`/update-address/${data.id}`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(data),
                            });

                            console.log("Response received from server:", response);

                            if (response.ok) {
                                const result = await response.json();
                                console.log("Success response:", result);
                                Swal.fire({
                                    title: 'Success',
                                    text: result.message || 'Address updated successfully',
                                    icon: 'success',
                                    confirmButtonText: 'OK'
                                })
                                    .then(() => window.location.href = '/checkout');
                            } else {
                                const error = await response.json();
                                console.log("Error response:", error);
                                Swal.fire({
                                    title: 'Error',
                                    text: error.message || 'Failed to update address',
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                });
                            }
                        } catch (error) {
                            console.error('Error during fetch:', error);
                            Swal.fire({
                                title: 'Error',
                                text: 'There was an error updating your address.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    } else {
                        console.log("Validation failed, form not submitted");
                        Swal.fire({
                            title: 'Validation Error',
                            text: 'Please correct the errors in the form.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                });
            });
        </script>


        <script>
            const nameid = document.getElementById("name");
            const countryid = document.getElementById("country")
            const phoneid = document.getElementById("phone")
            const pincode = document.getElementById("pincode")
            const homeid = document.getElementById("home")
            const areaid = document.getElementById("area")
            const landmarkid = document.getElementById("landmark")
            const townid = document.getElementById("town")
            const stateid = document.getElementById("state")
            const addressTypeSelect = document.getElementById("addressType");
            let nameValid = false;
            let countryValid = false;
            let phoneValid = false;
            let pincodeValid = false;
            let homeValid = false;
            let areaValid = false;
            let landmarkValid = false;
            let townValid = false;
            let stateValid = false;
            let addressTypeValid = false;

            function validateAddressType() {
                const addressTypeSelect = document.getElementById("addressType");
                if (addressTypeSelect.value === "") {
                    addressTypeValid = false;
                } else {
                    addressTypeValid = true;
                }
            }


            nameid.addEventListener('input', () => {
                const nameValue = nameid.value.trim();
                const namePattern = /^[A-Za-z]+(?: [A-Za-z]+){1,2}$/;
                if (nameValue === "") {
                    error1.style.display = "block";
                    error1.innerHTML = "Please enter a valid name";
                    nameValid = false;
                } else if (!namePattern.test(nameValue)) {
                    error1.style.display = "block";
                    error1.innerHTML = "Full name required";
                    nameValid = false;
                } else {
                    error1.style.display = "none";
                    error1.innerHTML = "";
                    nameValid = true;
                }
            });


            countryid.addEventListener('input', () => {
                const countryValue = countryid.value.trim();
                const countryPattern = /^[A-Za-z]+$/;
                if (countryValue === "") {
                    error2.style.display = "block";
                    error2.innerHTML = "Country cannot be blank";
                    countryValid = false;
                } else if (!countryPattern.test(countryValue)) {
                    error2.style.display = "block";
                    error2.innerHTML = "Country must only contain letters";
                    countryValid = false;
                } else {
                    error2.style.display = "none";
                    countryValid = true;
                }
            });


            phoneid.addEventListener('input', () => {
                const phoneValue = phoneid.value.trim();
                const phonePattern = /^\d{10}$/;
                if (phoneValue === "") {
                    error3.style.display = "block";
                    error3.innerHTML = "Phone number cannot be blank";
                    phoneValid = false;
                } else if (!phonePattern.test(phoneValue)) {
                    error3.style.display = "block";
                    error3.innerHTML = "Phone number must be 10 digits";
                    phoneValid = false;
                } else {
                    error3.style.display = "none";
                    phoneValid = true;
                }
            });


            pincode.addEventListener('input', () => {
                const pincodeValue = pincode.value.trim();
                const pincodePattern = /^\d{6}$/;
                if (pincodeValue === "") {
                    error4.style.display = "block";
                    error4.innerHTML = "Pincode cannot be blank";
                    pincodeValid = false;
                } else if (!pincodePattern.test(pincodeValue)) {
                    error4.style.display = "block";
                    error4.innerHTML = "Pincode must be 6 digits";
                    pincodeValid = false;
                } else {
                    error4.style.display = "none";
                    pincodeValid = true;
                }
            });


            homeid.addEventListener('input', () => {
                const homeValue = homeid.value.trim();
                if (homeValue === "" || homeValue.split(' ').length < 2) {
                    error5.style.display = "block";
                    error5.innerHTML = "Home address cannot be blank or just a single space";
                    homeValid = false;
                } else {
                    error5.style.display = "none";
                    homeValid = true;
                }
            });


            areaid.addEventListener('input', () => {
                const areaValue = areaid.value.trim();
                const areaPattern = /^[A-Za-z0-9]+$/;
                if (areaValue === "") {
                    error6.style.display = "block";
                    error6.innerHTML = "Area cannot be blank";
                    areaValid = false;
                } else if (!areaPattern.test(areaValue)) {
                    error6.style.display = "block";
                    error6.innerHTML = "Area must only contain letters and numbers, no spaces";
                    areaValid = false;
                } else {
                    error6.style.display = "none";
                    areaValid = true;
                }
            });


            landmarkid.addEventListener('input', () => {
                const landmarkValue = landmarkid.value.trim();
                const landmarkPattern = /^[A-Za-z0-9]+$/;
                if (landmarkValue === "") {
                    error7.style.display = "block";
                    error7.innerHTML = "Landmark cannot be blank";
                    landmarkValid = false;
                } else if (!landmarkPattern.test(landmarkValue)) {
                    error7.style.display = "block";
                    error7.innerHTML = "Landmark must only contain letters and numbers, no spaces";
                    landmarkValid = false;
                } else {
                    error7.style.display = "none";
                    landmarkValid = true;
                }
            });


            townid.addEventListener('input', () => {
                const townValue = townid.value.trim();
                const townPattern = /^[A-Za-z]+$/;
                if (townValue === "") {
                    error8.style.display = "block";
                    error8.innerHTML = "Town cannot be blank";
                    townValid = false;
                } else if (!townPattern.test(townValue)) {
                    error8.style.display = "block";
                    error8.innerHTML = "Town must only contain letters";
                    townValid = false;
                } else {
                    error8.style.display = "none";
                    townValid = true;
                }
            });


            stateid.addEventListener('input', () => {
                const stateValue = stateid.value.trim();
                const statePattern = /^[A-Za-z]+$/;
                if (stateValue === "") {
                    error9.style.display = "block";
                    error9.innerHTML = "State cannot be blank";
                    stateValid = false;
                } else if (!statePattern.test(stateValue)) {
                    error9.style.display = "block";
                    error9.innerHTML = "State must only contain letters";
                    stateValid = false;
                } else {
                    error9.style.display = "none";
                    stateValid = true;
                }
            });

            addressTypeSelect.addEventListener('change', validateAddressType);
            document.getElementById('signform').addEventListener('submit', async (event) => {
                event.preventDefault();
                validateAddressType();
                console.log(nameValid, countryValid, phoneValid, pincodeValid, homeValid, areaValid, landmarkValid, townValid, stateValid, addressTypeValid)

                if (nameValid && countryValid && phoneValid && pincodeValid && homeValid && areaValid && landmarkValid && townValid && stateValid && addressTypeValid) {
                    const formData = new FormData(event.target);
                    const data = Object.fromEntries(formData.entries());

                    try {
                        const response = await fetch('/addAddress', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(data),
                        });

                        if (response.ok) {
                            const result = await response.json();
                            Swal.fire('Success', result.message, 'success').then(() => {
                                window.location.href = '/checkout';
                            });
                        } else {
                            const error = await response.json();
                            Swal.fire('Error', error.message, 'error');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        Swal.fire('Error', 'There was an error submitting your address.', 'error')
                    }
                } else {
                    Swal.fire('Validation Error', 'Please correct the errors in the form.', 'error')
                }
            });
        </script>

        <script>


            document.addEventListener('DOMContentLoaded', function () {
                document.getElementById('checkoutForm').addEventListener('submit', async function (event) {
                    event.preventDefault();

                    // Validate payment method and primary address
                    const paymentChecked = document.querySelector('input[name="paymentMethod"]:checked');
                    const primaryAddress = document.querySelector('input[name="primaryAddressId"]');
                    const totalAmount = parseFloat(document.querySelector('input[name="total"]').value);

                    if (!paymentChecked) {
                        Swal.fire({
                            title: 'Payment Method Required',
                            text: 'Please select a payment method (Wallet, Cash on Delivery, or Razor Pay).',
                            icon: 'warning',
                            confirmButtonText: 'OK'
                        });
                        return;
                    }

                    if (!primaryAddress) {
                        Swal.fire({
                            title: 'Primary Address Required',
                            text: 'Please add and select a primary shipping address.',
                            icon: 'warning',
                            confirmButtonText: 'ok',
                            showCancelButton: true
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = '/checkout';
                            }
                        });
                        return;
                    }

                    // Restrict COD for orders above ₹1000
                    if (paymentChecked.value === 'COD' && totalAmount > 1000) {
                        Swal.fire({
                            title: 'COD Not Allowed',
                            text: 'Cash on Delivery is not available for orders above ₹1000. Please choose another payment method.',
                            icon: 'warning',
                            confirmButtonText: 'OK'
                        });
                        return;
                    }

                    // Confirm order
                    Swal.fire({
                        title: 'Confirm Order',
                        html: `
                <p>Are you sure you want to place this order?</p>
                <strong>Payment Method:</strong> ${paymentChecked.value}<br>
                <strong>Total Amount:</strong> ₹${totalAmount}
            `,
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, Place Order',
                        cancelButtonText: 'Cancel',
                        reverseButtons: true
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            // Disable submit button
                            const submitButton = event.target.querySelector('button[type="submit"]');
                            submitButton.disabled = true;
                            submitButton.innerHTML = 'Processing...';

                            try {
                                // Collect form data
                                const formData = {
                                    primaryAddressId: primaryAddress.value,
                                    products: Array.from(document.querySelectorAll('input[name="products[]"]')).map(input => input.value),
                                    quantities: Array.from(document.querySelectorAll('input[name="quantities[]"]')).map(input => input.value),
                                    sizes: Array.from(document.querySelectorAll('input[name="sizes[]"]')).map(input => input.value),
                                    colors: Array.from(document.querySelectorAll('input[name="colors[]"]')).map(input => input.value),
                                    subtotal: document.querySelector('input[name="subtotal"]').value,
                                    shipping: document.querySelector('input[name="shipping"]').value,
                                    total: totalAmount,
                                    paymentMethod: paymentChecked.value,
                                };

                                // Handle payment methods
                                if (paymentChecked.value === 'Wallet') {
                                    await handleWalletPayment(formData);
                                } else if (paymentChecked.value === 'RazorPay') {
                                    handleRazorpayPayment(formData);
                                } else if (paymentChecked.value === 'COD') {
                                    await handleCODPayment(formData);
                                }
                            } catch (error) {
                                console.error('Checkout Error:', error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Checkout Failed',
                                    text: error.message || 'Unable to process your order. Please try again.',
                                    confirmButtonText: 'Retry'
                                });
                            } finally {
                                // Re-enable submit button
                                submitButton.disabled = false;
                                submitButton.innerHTML = 'Proceed to Checkout';
                            }
                        }
                    });
                });
            });
            // Handle Razorpay Payment
  function handleRazorpayPayment(formData) {
       

        fetch('/checkout', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData),
        })
            .then(response => {
              
                if (!response.ok) {
                    throw new Error(`Checkout API failed: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
               

                if (data.success && data.razorpayOrderId) {
                    const options = {
                        key: data.key,
                        amount: data.amount,
                        currency: 'INR',
                        name: 'CROWNIFY',
                        description: 'Order Payment',
                        order_id: data.razorpayOrderId,
                        handler: function (response) {
                        

                            // Verify payment on server
                            fetch('/verify-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    ...response,
                                    orderId: data.orderId
                                }),
                            })
                                .then(verifyResponse => {
                                  
                                    if (!verifyResponse.ok) {
                                        throw new Error(`Payment Verification Failed: ${verifyResponse.statusText}`);
                                    }
                                    return verifyResponse.json();
                                })
                                .then(verifyData => {
                                   
                                    if (verifyData.success) {
                                      
                                        window.location.href = `/payment-success?orderId=${data.orderId}`;
                                    } else {
                                       
                                        handlePaymentFailure(data.orderId, data.amount);
                                    }
                                })
                                .catch(error => {
                                  
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Payment Verification Error',
                                        text: error.message || 'An error occurred during payment verification.',
                                    });
                                });
                        },
                        prefill: {
                            name: 'Customer Name',
                            email: 'customer@example.com',
                            contact: 'Customer Phone Number'
                        },
                        theme: {
                            color: '#3399cc'
                        },
                        modal: {
                            // ondismiss: function () {
                            

                            //     // Revert any actions taken before the modal was opened
                            //     // revertActions(formData);
                            // }
                             ondismiss: function () {
                                console.log("DEBUG: Razorpay modal dismissed.");
                                // Send a request to delete the preliminary order
                                fetch('/delete-preliminary-order', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({ orderId: data.orderId }),
                                })
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error(`Failed to delete preliminary order: ${response.statusText}`);
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        if (data.success) {
                                            console.log("DEBUG: Preliminary order deleted successfully.");
                                        } else {
                                            console.warn("DEBUG: Preliminary order deletion failed:", data.message);
                                        }
                                    })
                                    .catch(error => {
                                        console.error("DEBUG: Error deleting preliminary order:", error.message);
                                    });
                            }
                        }
                    };

                 
                    const razorpayInstance = new Razorpay(options);

                    razorpayInstance.open();

                    // Handle payment failure
                    razorpayInstance.on('payment.failed', function (response) {
                

                        // Save failed payment details to server
                        fetch('/payment-failure', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                orderId: data.orderId,
                                paymentId: response.error.metadata.payment_id || null,
                                razorpayOrderId: response.error.metadata.order_id || null,
                                reason: response.error.reason || 'Unknown reason',
                                description: response.error.description || 'No description available',
                            }),
                        })
                            .then(failureResponse => {
                             
                                if (!failureResponse.ok) {
                                    throw new Error(`Failed to save payment failure: ${failureResponse.statusText}`);
                                }
                                return failureResponse.json();
                            })
                            .then(failureData => {
                             
                                window.location.href = `/payment-Failure?orderId=${data.orderId}`;
                            })
                            .catch(error => {
                             
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Payment Failure Error',
                                    text: error.message || 'Unable to save payment failure details. Please contact support.',
                                }).then(() => {
                                    window.location.href = '/error-page '; // Adjust as needed
                                });
                            });
                    });
                } else {
                    throw new Error(data.message || 'Failed to create Razorpay order');
                }
            })
            .catch(error => {
         
                Swal.fire({
                    icon: 'error',
                    title: 'Payment Failed',
                    text: error.message || 'Unable to process payment. Please try again.',
                    confirmButtonText: 'Retry'
                });
            });
    }

    
            async function handleWalletPayment(formData) {
                try {
                    const response = await fetch('/checkout', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData),
                    });

                    const data = await response.json();

                    if (data.success) {
                        window.location.href =  `/payment-success?orderId=${data.orderId}`;
                    } else {
                        throw new Error(data.message || 'Unable to process wallet payment');
                    }
                } catch (error) {
                    console.error('Wallet Checkout Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Failed',
                        text: error.message || 'Unable to process wallet payment. Please try again.',
                        confirmButtonText: 'Retry'
                    });
                }
            }

            // Handle COD Payment
            async function handleCODPayment(formData) {
                try {
                    const response = await fetch('/checkout', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData),
                    });

                    const data = await response.json();

                    if (data.success) {
                       window.location.href = `/payment-success?orderId=${data.orderId}`;
                    } else {
                        throw new Error(data.message || 'Unable to place order');
                    }
                } catch (error) {
                    console.error('COD Checkout Error:', error); Swal.fire({
                        icon: 'error',
                        title: 'Order Failed',
                        text: error.message || 'Unable to process your order. Please try again.',
                        confirmButtonText: 'Retry'
                    });
                }
            }

            function confirmPrimaryAddress(event, addressId) {
                event.preventDefault();

                Swal.fire({
                    title: 'Set as Primary Address?',
                    text: 'Do you want to set this as your primary address?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, set it!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/set-primary-address/${addressId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            credentials: 'same-origin'
                        })
                            .then(async response => {
                                if (!response.ok) {
                                    const text = await response.text();
                                    console.log("Error response body:", text);
                                    throw new Error(`HTTP error! status: ${response.status}`);
                                }
                                return response.json();
                            })
                            .then(data => {
                                if (data.success) {
                                    Swal.fire({
                                        title: 'Success!',
                                        text: 'Primary address updated successfully.',
                                        icon: 'success',
                                        confirmButtonText: 'OK'
                                    }).then(() => {
                                        window.location.reload();
                                    });
                                } else {
                                    Swal.fire({
                                        title: 'Failed!',
                                        text: data.message || 'Failed to update primary address.',
                                        icon: 'error',
                                        confirmButtonText: 'OK'
                                    });
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'An error occurred while updating primary address. Please try again.',
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                });
                            });
                    }
                });
            }
        </script>
      <script>
            // Function to remove the coupon from the session
        
            // Event listener for visibility change to check if user is leaving the checkout page
            document.addEventListener('visibilitychange', () => {
                if (document.visibilityState === 'hidden') {
                    // Check if the current page is the checkout page
                    if (window.location.pathname === '/checkout') {
                        removeCouponFromSession();
                    }
                }
            });

            // Alternatively, using beforeunload to check if the user is leaving the checkout page
            window.addEventListener('beforeunload', (event) => {
                if (window.location.pathname === '/checkout') {
                    removeCouponFromSession();
                }
            });
        </script>

        <script>
            const discountAmountElement = document.querySelector('.checkout__total__all li:nth-child(2) span');
            const totalElement = document.querySelector('.checkout__total__all li:nth-child(4) span');

            document.addEventListener('DOMContentLoaded', () => {
                const couponForm = document.getElementById('couponForm');
                const applyCouponButton = document.getElementById('applyCouponButton');
                const removeCouponButton = document.getElementById('removeCouponButton');

                if (couponForm) {
                    couponForm.addEventListener('submit', (event) => {
                        event.preventDefault();
                        const couponCode = document.getElementById('couponCodeInput').value;
                        applyCoupon(couponCode);
                    });
                }

                if (applyCouponButton) {
                    applyCouponButton.addEventListener('click', () => {
                        const couponCode = document.getElementById('couponCodeInput').value;
                        applyCoupon(couponCode);
                    });
                }

                if (removeCouponButton) {
                    removeCouponButton.addEventListener('click', () => {
                        removeCoupon();
                    });
                }

             
              
            });
       function applyCoupon(couponCode) {
            console.log("Applying coupon:", couponCode);
            if (!couponCode) {
                Swal.fire('Error', 'Please enter a coupon code.', 'error');
                return;
            }

            // Select the subtotal element
            const subtotalElement = document.querySelector('.checkout__total__all li:nth-child(1) span');
            const subtotal = parseFloat(subtotalElement.textContent.replace('₹', '').replace(',', ''));

            // Select the shipping element
            const shippingElement = document.querySelector('.checkout__total__all li:nth-child(3) span');
            const shipping = parseFloat(shippingElement.textContent.replace('₹', '').replace(',', ''));

            const cartTotal = subtotal + shipping;

            console.log("Subtotal before applying coupon:", subtotal);
            console.log("Shipping cost:", shipping);
            console.log("Total before applying coupon:", cartTotal);

            fetch('/apply-coupon', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ couponCode, cartTotal }),
            })
                .then(response => response.json())
                .then(data => {
                    console.log("Coupon application response:", data);
                    if (data.success) {
                        const discount = parseFloat(data.discount.applied);
                        const discountElement = document.querySelector('.checkout__total__all li:nth-child(2) span');
                        discountElement.innerHTML = '₹' + discount.toFixed(2);

                        const total = cartTotal - discount; // Calculate the new total after discount
                        const totalElement = document.querySelector('.checkout__total__all li:nth-child(4) span');
                        totalElement.innerHTML = '₹' + total.toFixed(2);

                        // Update hidden input values if necessary
                        document.querySelector('input[name="subtotal"]').value = subtotal;
                        document.querySelector('input[name="shipping"]').value = shipping;
                        document.querySelector('input[name="total"]').value = total;

                        sessionStorage.setItem('appliedCoupon', couponCode);
                        Swal.fire('Success', 'Coupon applied successfully!', 'success');
                    } else {
                        Swal.fire('Error', data.message || 'Failed to apply coupon.', 'error');
                    }
                })
                .catch(error => {
                    console.error("Fetch Error:", error);
                    Swal.fire('Error', 'An error occurred. Try again.', 'error');
                });
        }
  function removeCoupon() {
        console.log("Removing coupon...");

        // Get the original total before the coupon was applied
        const totalElement = document.querySelector('.checkout__total__all li:nth-child(4) span');
        const originalTotal = parseFloat(totalElement.textContent.replace('₹', '').replace(',', ''));

        fetch('/remove-coupon', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ cartTotal: originalTotal }), // Send the original total
        })
            .then(response => response.json())
            .then(data => {
                console.log("Remove coupon response:", data);
                handleRemoveCouponResponse(data);
            })
            .catch(error => {
                console.error("Fetch Error:", error);
                Swal.fire('Error', 'An error occurred. Try again.', 'error');
            });
    }


        function handleRemoveCouponResponse(data) {
            if (data.success) {
                // Update the discount amount to zero
                discountAmountElement.innerHTML = '₹0';

                // Check if finalTotal is defined
                if (data.finalTotal !== undefined) {
                    totalElement.innerHTML = '₹' + data.finalTotal.toFixed(2);
                } else {
                    console.error("finalTotal is undefined");
                    totalElement.innerHTML = '₹0'; // Set a default value or handle accordingly
                    Swal.fire('Error', 'Final total is not available after coupon removal.', 'error');
                    return; // Exit the function if finalTotal is not available
                }

                // Clear the applied coupon from session storage
                sessionStorage.removeItem('appliedCoupon');
                Swal.fire('Success', 'Coupon removed successfully.', 'success')
                .then(() => {
                        window.location.reload();
                    });
            } else {
                Swal.fire('Error', data.message || 'Failed to remove coupon.', 'error');
            }
        }
        </script>
     
        <script>
            function copyToClipboard(code) {
                navigator.clipboard.writeText(code).then(() => {
                    // Use SweetAlert for feedback
                    Swal.fire({
                        icon: 'success',
                        title: 'Copied!',
                        text: 'Coupon code copied to clipboard: ' + code,
                        timer: 2000, // Auto-close after 2 seconds
                        showConfirmButton: false
                    });
                }).catch((err) => {
                    // Handle error with SweetAlert
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Could not copy text. Please try again!',
                    });
                    console.error('Could not copy text: ', err);
                });
            }
        </script>
        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const cartLinks = document.querySelectorAll('.site-header__cart');

                cartLinks.forEach(link => {
                    link.addEventListener('click', (e) => {
                        console.log('Cart link clicked');


                        e.stopPropagation();


                        window.location.href = '/cart';


                        e.preventDefault();
                    });
                });
            });
        </script>
        <script>
            async function checkUserBlockStatus() {
                try {
                    const response = await fetch("/check-block-status", {
                        method: "GET",
                        headers: {
                            "Content-Type": "application/json",
                        },
                    });
                    const data = await response.json();

                    if (data.blocked) {

                        window.location.href = "/login"; // Redirect to the login page or home page
                    }
                } catch (error) {
                    console.error("Error checking block status:", error);
                }
            }

            // Check every 30 seconds
            setInterval(checkUserBlockStatus, 2000);
        </script>