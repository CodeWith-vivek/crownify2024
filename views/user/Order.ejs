<%- include("../../views/partials/user/headerprofile") %>

    <div class="col-md-9">
        <div id="orderModal" class="modal" style="display:none;">
            <div class="modal-content">
                <span class="close " onclick="closeModal()">&times;</span>
                <h2 class="mb-4">Order Details - <span id="modalOrderId"></span></h2>
                <div id="orderDetails">
                    <div class="order-info mb-4">
                        <p><strong>Name:</strong> <span id="modalCustomer"></span></p>
                        <p><strong>Order Date:</strong> <span id="modalDate"></span></p>
                        <p><strong>Payment Status:</strong> <span id="modalPaymentStatus"></span></p>
                    </div>
                    <h3 class="mb-3">Items</h3>
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Product</th>
                                    <th>Quantity</th>
                                    <th>Price</th>
                                    <th>Total</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="modalItems">

                            </tbody>
                        </table>

                        <div id="orderSummary" class="mt-4">
                            <p><strong>Subtotal:</strong> ₹<span id="modalSubtotal"></span></p>
                            <p><strong>Discount:</strong> ₹<span id="modalDiscount"></span></p>
                            <p><strong>Shipping:</strong> ₹<span id="modalShipping"></span></p>
                            <p class="h5"><strong>Grand Total:</strong> ₹<span id="modalGrandTotal"></span></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="cancelModal" class="modal">
            <div class="modal-content p-4">
                <h4>Cancel Item</h4>
                <p><strong>Order ID:</strong> <span id="cancelOrderId"></span></p>
                <p
                style="margin-bottom: 20px;">*Note: Refund amounts may vary based on the cancellation of items in your order. Shipping costs are
                    calculated
                    proportionately, which may affect the total refund.</p>
                <div class="d-flex align-items-start mb-3">
                    <img id="cancelProductImage" src="" alt="Product Image" class="me-3 rounded" width="100"
                        height="100">
                    <div>
                        <p><strong>Product Name:</strong> <span id="cancelProductName"></span></p>
                        <p><strong>Size:</strong> <span id="cancelProductSize"></span></p>
                        <p><strong>Color:</strong> <span id="cancelProductColor"></span></p>
                        <p><strong>Price:</strong> ₹<span id="cancelProductPrice"></span></p>
                    </div>
                </div>
                <div class="form-group">
                    <label for="cancelComment">Reason for cancellation:</label>
                    <textarea id="cancelComment" class="form-control" rows="3"
                        placeholder="Enter your reason"></textarea>
                </div>
                <div class="d-flex justify-content-between mt-3">
                    <button id="submitCancellation" class="btn btn-primary">Submit</button>
                    <button onclick="closeModal('cancelModal')" class="btn btn-secondary">Close</button>
                </div>
            </div>
        </div>

        <div id="returnModal" class="modal">
            <div class="modal-content p-4">
                <h4>Return Item</h4>
                <p><strong>Order ID:</strong> <span id="returnOrderId"></span></p>
                <div class="d-flex align-items-start mb-3">
                    <img id="returnProductImage" src="" alt="Product Image" class="me-3 rounded" width="100"
                        height="100">
                    <div>
                        <p><strong>Product Name:</strong> <span id="returnProductName"></span></p>
                        <p><strong>Size:</strong> <span id="returnProductSize"></span></p>
                        <p><strong>Color:</strong> <span id="returnProductColor"></span></p>
                        <p><strong>Price:</strong> ₹<span id="returnProductPrice"></span></p>
                    </div>
                </div>
                <div class="form-group">
                    <label for="returnComment">Reason for return:</label>
                    <textarea id="returnComment" class="form-control" rows="3"
                        placeholder="Enter your reason"></textarea>
                </div>
                <div class="d-flex justify-content-between mt-3">
                    <button id="submitReturn" class="btn btn-primary">Submit</button>
                    <button onclick="closeModal('returnModal')" class="btn btn-secondary">Close</button>
                </div>
            </div>
        </div>




        <div class="container">
            <div class="card">
                <div class="card-header">
                    <h5>Your Orders</h5>
                </div>
                <div class="card-body">
                    <div class="order-list">
                        <% if (orders && orders.length> 0) { %>
                            <% orders.forEach(order=> { %>
                                <div class="order-item" data-order-id="<%= order.orderNumber %>"
                                    data-customer-name="<%= user.name %>" data-order-date="<%= order.createdAt %>"
                                    data-address="<%= order.shippingAddress || 'N/A' %>"
                                    data-items='<%= JSON.stringify(order.items) %>'
                                    data-timeline='<%= JSON.stringify(order.timeline || []) %>'
                                    data-subtotal="<%= order.subtotal || 0 %>"
                                    data-discount="<%= order.discount || 0 %>"
                                    data-shipping="<%= order.shipping || 0 %>"
                                    data-grandtotal="<%= order.grandTotal || 0 %>"
                                    data-paymentStatus="<%= order.paymentStatus || 'N/A' %>">
                                    <div class="order-content">
                                        <h6 class="order-id">Order ID: <%= order.orderNumber || 'N/A' %>
                                        </h6>
                                        <% order.items.forEach(item=> { %>
                                            <div class="product-info row ">
                                                <div class="col-3 col-md-2">
                                                    <img src="/uploads/product-image/<%= item.productImage%>"
                                                        alt="<%= item.productId?.productName || 'Product Image' %>"
                                                        class="product-image">
                                                </div>
                                                <div class="col-9 col-md-10">
                                                    <div class="product-details">
                                                        <h3>
                                                            <%= item.productId?.productName || 'Product Name' %>
                                                        </h3>
                                                        <p>Color: <%= item.variant.color || 'N/A' %>
                                                        </p>
                                                        <p>Size: <%= item.variant.size || 'N/A' %>
                                                        </p>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="order-details row">
                                                <div class="order-detail col-6 col-md-4">
                                                    <h4>Quantity</h4>
                                                    <p>
                                                        <%= item.quantity %>
                                                    </p>
                                                </div>
                                                <div class="order-detail col-6 col-md-4">
                                                    <h4>Price</h4>
                                                    <p>₹<%= (item.productId?.salePrice || item.productId?.regularPrice
                                                            || 0) * item.quantity %>
                                                    </p>
                                                </div>
                                                <div class="order-detail col-12 col-md-4">
                                                    <h4>Status</h4>
                                                    <span
                                                        class="badge <%= item.badgeClass %> <%= item.orderStatus === 'Failed' ? 'text-danger bg-light' : '' %>">
                                                        <%= item.orderStatus || 'Pending' %>
                                                    </span>
                                                </div>
                                            </div>
                                            <hr>
                                            <% }); %>
                                    </div>
                                    <button class="btn btn-dark btn-outline-secondary btn w-100 mb-1 view-order"
                                        style="font-size: smaller;">
                                        View <i class="bi bi-chevron-down ms-1"></i>
                                    </button>
                                    <% const allDelivered=order.items.every(item=> item.orderStatus === 'Delivered');
                                        const anyFailed = order.paymentStatus === 'Failed' &&
                                        order.items.some(item => item.orderStatus === 'Failed') &&
                                        !order.items.some(item => item.orderStatus === 'canceled');
                                        const paymentCompleted = order.paymentStatus === 'Completed';
                                        %>

                                        <% if (anyFailed) { %>
                                            <button class="btn btn-primary btn w-100 mb-2 pay-now-btn"
                                                data-order-id="<%= order.orderNumber %>">
                                                Retry Payment
                                            </button>
                                            <% } %>

                                                <% if (allDelivered || paymentCompleted) { %>
                                                    <button class="btn btn-success btn w-100 mb-2 invoice-btn"
                                                        data-order-id="<%= order.orderNumber %>">
                                                        Download Invoice
                                                    </button>
                                                    <% } %>

                                                        <div class="order-summary">
                                                            <div class="summary-row">
                                                                <span>Subtotal:</span>
                                                                <span>₹<%= order.subtotal || 0 %></span>
                                                            </div>
                                                            <div class="summary-row">
                                                                <span>Discount :</span>
                                                                <span>-₹<%= order.discount || 0 %></span>
                                                            </div>
                                                            <div class="summary-row">
                                                                <span>Shipping:</span>
                                                                <span>₹40</span>
                                                            </div>
                                                            <div class="summary-row">
                                                                <span>Total:</span>
                                                                <span>₹<%= order.grandTotal || 0 %></span>
                                                            </div>
                                                        </div>
                                </div>
                                <% }); %>
                                    <% } else { %>
                                        <div class="alert alert-warning" role="alert">
                                            You have not ordered anything yet.
                                        </div>
                                        <% } %>
                    </div>
                    <div class="pagination-controls">
                        <% if (currentPage> 1) { %>
                            <a href="?page=<%= currentPage - 1 %>&limit=<%= limit %>"
                                class="btn btn-secondary">Previous</a>
                            <% } %>
                                <span>Page <%= currentPage %> of <%= totalPages %></span>
                                <% if (currentPage < totalPages) { %>
                                    <a href="?page=<%= currentPage + 1 %>&limit=<%= limit %>"
                                        class="btn btn-secondary">Next</a>
                                    <% } %>
                    </div>
                </div>
            </div>
        </div>
        <%- include("../../views/partials/user/footerprofile") %>


            <script>
                document.querySelectorAll('.view-order').forEach(button => {
                    button.addEventListener('click', function () {
                        const orderItem = this.closest('.order-item');
                        const orderNumber = orderItem.getAttribute('data-order-id');
                        const customerName = orderItem.getAttribute('data-customer-name');
                        const orderDate = orderItem.getAttribute('data-order-date');
                        const items = JSON.parse(orderItem.getAttribute('data-items')) || [];

                        const subtotal = orderItem.getAttribute('data-subtotal');
                        const discount = orderItem.getAttribute('data-discount');
                        const shipping = 40;
                        const grandTotal = orderItem.getAttribute('data-grandtotal');
                        const paymentStatus = orderItem.getAttribute('data-paymentStatus');


                        document.getElementById('modalOrderId').textContent = orderNumber;
                        document.getElementById('modalCustomer').textContent = customerName;
                        document.getElementById('modalDate').textContent = new Date(orderDate).toLocaleDateString();
                        document.getElementById('modalSubtotal').textContent = subtotal;
                        document.getElementById('modalDiscount').textContent = discount;
                        document.getElementById('modalShipping').textContent = shipping;
                        document.getElementById('modalGrandTotal').textContent = grandTotal;
                        document.getElementById('modalPaymentStatus').textContent = paymentStatus;


                        const modalItems = document.getElementById('modalItems');
                        modalItems.innerHTML = '';

                        items.forEach((item, index) => {
                            const itemStatus = item.orderStatus || 'Return Pending';
                            const productId = item.productId || {};
                            const productName = productId.productName || 'Unknown Product';
                            const productImage = item.productImage || 'placeholder.jpg';
                            const variant = item.variant || {};
                            const itemPrice = (productId.salePrice || productId.regularPrice || 0) * item.quantity;

                            // Badge class helper
                            const getBadgeClass = (status) => {
                                const badgeClasses = {
                                    'Failed': 'bg-danger',
                                    'Delivered': 'bg-success',
                                    'Shipped': 'bg-purple',
                                    'Return Pending': 'bg-warning',
                                    'Return requested': 'bg-orange',
                                    'Returned': 'bg-info',
                                    'Return Rejected': 'bg-danger',
                                    'Placed': 'bg-warning',
                                    'Confirmed': 'bg-warning',
                                    'Canceled': 'bg-danger',
                                };
                                return badgeClasses[status] || '';
                            };


                            const getActionButton = (status) => {
                                const commonAttributes = `
                                    data-order-id="${orderNumber}" 
                                    data-item-index="${index}" 
                                    data-product-name="${productName}" 
                                    data-product-image="${productImage}"
                                    data-product-color="${variant.color || 'N/A'}"
                                    data-product-size="${variant.size || 'N/A'}"
                                    data-product-price="${itemPrice}"
                                `;

                                switch (status) {
                                    case 'Delivered':
                                        return `<button class="btn btn-warning btn-sm return-item" ${commonAttributes}>Return</button>`;
                                    case 'Return requested':
                                        return `<button class="btn btn-danger btn-sm cancel-return" ${commonAttributes}>Cancel Return</button>`;
                                    case 'Placed':
                                    case 'Confirmed':
                                    case 'Failed':
                                        return `<button class="btn btn-danger btn-sm cancel-item" ${commonAttributes}>Cancel</button>`;
                                    default:
                                        return '';
                                }
                            };


                            const row = `
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <img src="/uploads/product-image/${productImage}" 
                                                 alt="${productName}" 
                                                 class="me-3 rounded" 
                                                 width="60" height="60">
                                            <div>
                                                <div class="fw-medium">${productName}</div>
                                                <div class="text-muted">Size: ${variant.size || 'N/A'}</div>
                                                <div class="text-muted">Color: ${variant.color || 'N/A'}</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>${item.quantity}</td>
                                    <td>₹${productId.salePrice || productId.regularPrice || 0}</td>
                                    <td>₹${itemPrice}</td>
                                    <td>
                                        <span class="badge ${getBadgeClass(itemStatus)}">${itemStatus}</span>
                                    </td>
                                    <td>
                                        ${getActionButton(itemStatus)}
             </td>
                                </tr>
                            `;
                            modalItems.innerHTML += row;
                        });


                        document.getElementById('orderModal').style.display = 'block';


                        setupActionButtons();
                    });
                });

                function setupActionButtons() {
                    document.querySelectorAll('.cancel-return').forEach(button => {
                        button.addEventListener('click', function () {
                            console.log('Cancel return button clicked');
                            const orderId = this.getAttribute('data-order-id');
                            const itemIndex = this.getAttribute('data-item-index');
                            const productName = this.getAttribute('data-product-name');
                            const productImage = this.getAttribute('data-product-image');
                            const productColor = this.getAttribute('data-product-color');
                            const productSize = this.getAttribute('data-product-size');
                            const productPrice = this.getAttribute('data-product-price');

                            handleCancelReturnRequest(orderId, itemIndex, productName, productSize, productColor, productPrice);
                        });
                    });

                    document.querySelectorAll('.cancel-item').forEach(button => {
                        button.addEventListener('click', function () {
                            const orderNumber = this.getAttribute('data-order-id');
                            const itemIndex = this.getAttribute('data-item-index');
                            const productName = this.getAttribute('data-product-name');
                            const productImage = this.getAttribute('data-product-image');
                            const productColor = this.getAttribute('data-product-color');
                            const productSize = this.getAttribute('data-product-size');
                            const productPrice = this.getAttribute('data-product-price');

                            document.getElementById('cancelOrderId').textContent = orderNumber;
                            document.getElementById('cancelProductName').textContent = productName;
                            document.getElementById('cancelProductImage').src = `/uploads/product-image/${productImage || 'placeholder.jpg'}`;
                            document.getElementById('cancelProductColor').textContent = productColor || 'N/A';
                            document.getElementById('cancelProductSize').textContent = productSize || 'N/A';
                            document.getElementById('cancelProductPrice').textContent = productPrice;

                            document.getElementById('cancelModal').style.display = 'block';

                            const submitCancellationButton = document.getElementById('submitCancellation');
                            submitCancellationButton.onclick = function () {
                                handleItemCancellation(
                                    orderNumber,
                                    itemIndex,
                                    productName,
                                    productSize,
                                    productColor,
                                    productPrice
                                );
                            };
                        });
                    });

                    document.querySelectorAll('.return-item').forEach(button => {
                        button.addEventListener('click', function () {
                            const orderNumber = this.getAttribute('data-order-id');
                            const itemIndex = this.getAttribute('data-item-index');
                            const productName = this.getAttribute('data-product-name');
                            const productImage = this.getAttribute('data-product-image');
                            const productColor = this.getAttribute('data-product-color');
                            const productSize = this.getAttribute('data-product-size');
                            const productPrice = this.getAttribute('data-product-price');

                            document.getElementById('returnOrderId').textContent = orderNumber;
                            document.getElementById('returnProductName').textContent = productName;
                            document.getElementById('returnProductImage').src = `/uploads/product-image/${productImage || 'placeholder.jpg'}`;
                            document.getElementById('returnProductColor').textContent = productColor || 'N/A';
                            document.getElementById('returnProductSize').textContent = productSize || 'N/A';
                            document.getElementById('returnProductPrice').textContent = productPrice;

                            document.getElementById('returnComment').value = '';

                            document.getElementById('returnModal').style.display = 'block';

                            const submitReturnButton = document.getElementById('submitReturn');
                            submitReturnButton.onclick = function () {
                                handleReturnSubmission(
                                    orderNumber,
                                    itemIndex,
                                    productName,
                                    productSize,
                                    productColor,
                                    productPrice
                                );
                            };
                        });
                    });
                }

                function handleCancelReturnRequest(orderNumber, itemIndex, productName, productSize, productColor, productPrice) {
                    console.log('Cancel return request initiated');
                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'Do you really want to cancel this return request?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, cancel it!',
                        cancelButtonText: 'No, keep it'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                title: 'Processing...',
                                text: 'Please wait while we cancel your return request.',
                                allowOutsideClick: false,
                                showConfirmButton: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });


                            const data = {
                                orderNumber,
                                itemIndex,
                                productName,
                                productSize,
                                productColor,
                                productPrice
                            };

                            fetch('/cancel-return-request', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify(data),
                            })
                                .then(response => response.json())
                                .then(data => {
                                    console.log(data);
                                    if (data.success) {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Return Request Canceled',
                                            text: 'The return request has been successfully canceled.',
                                            confirmButtonText: 'OK'
                                        }).then(() => {

                                            location.reload();
                                        });
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Cancellation Failed',
                                            text: data.message || 'Failed to cancel the return request. Please try again later.',
                                            confirmButtonText: 'OK'
                                        });
                                    }
                                })
                                .catch(error => {
                                    console.error('Error:', error);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'An error occurred while canceling the return request. Please try again later.',
                                        confirmButtonText: 'OK'
                                    });
                                });
                        }
                    });
                }

                function handleReturnSubmission(orderNumber, itemIndex, productName, productSize, productColor, productPrice) {
                    const comment = document.getElementById('returnComment').value.trim();
                    if (!comment) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Comment Required',
                            text: 'Please provide a reason for return before proceeding.',
                            confirmButtonText: 'OK'
                        });
                        return;
                    }

                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'Do you really want to submit this return request?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, submit it!',
                        cancelButtonText: 'No, keep it'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                title: 'Processing...',
                                text: 'Please wait while we process your return request.',
                                allowOutsideClick: false,
                                showConfirmButton: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });

                            const data = {
                                orderNumber,
                                productName,
                                productSize,
                                productColor,
                                productPrice,
                                returnComment: comment,
                            };

                            fetch('/return-item', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify(data),
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Return Submitted',
                                            text: 'Your return request has been submitted successfully.',
                                            confirmButtonText: 'OK'
                                        }).then(() => {
                                            window.location.reload();
                                        });
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Submission Failed',
                                            text: data.message || 'Failed to submit the return request. Please try again later.',
                                            confirmButtonText: 'OK'
                                        });
                                    }
                                })
                                .catch(error => {
                                    console.error('Error:', error);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'An error occurred while submitting the return request. Please try again later.',
                                        confirmButtonText: 'OK'
                                    });
                                });
                        }
                    });
                }

                function handleItemCancellation(orderNumber, itemIndex, productName, productSize, productColor, productPrice) {
                    const cancelComment = document.getElementById('cancelComment').value.trim();

                    if (!cancelComment) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Comment Required',
                            text: 'Please provide a reason for cancellation before proceeding.',
                            confirmButtonText: 'OK'
                        });
                        return;
                    }

                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'Do you really want to cancel this item?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, cancel it!',
                        cancelButtonText: 'No, keep it'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                title: 'Processing...',
                                text: 'Please wait while we cancel your item.',
                                allowOutsideClick: false,
                                showConfirmButton: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });

                            const data = {
                                orderNumber,
                                productName,
                                productSize,
                                productColor,
                                productPrice,
                                cancelComment
                            };

                            fetch('/cancel-item', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify(data),
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Item Canceled',
                                            text: 'The item has been successfully canceled.',
                                            confirmButtonText: 'OK'
                                        }).then(() => {
                                            window.location.reload();
                                        });
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Cancellation Failed',
                                            text: data.message || 'Failed to cancel the item. Please try again later.',
                                            confirmButtonText: 'OK'
                                        });
                                    }
                                })
                                .catch(error => {
                                    console.error('Error:', error);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'An error occurred while canceling the item. Please try again later.',
                                        confirmButtonText: 'OK'
                                    });
                                });
                        } else {
                            Swal.fire({
                                icon: 'info',
                                title: 'Action Cancelled',
                                text: 'The item was not canceled.',
                                toast: true,
                                position: 'top-end',
                                timer: 3000,
                                timerProgressBar: true,
                                showConfirmButton: false
                            });
                        }
                    });
                }

                function closeModal(modalId) {
                    if (modalId) {
                        document.getElementById(modalId).style.display = 'none';
                    } else {
                        document.querySelectorAll('.modal').forEach(modal => {
                            modal.style.display = 'none';
                        });
                    }

                    if (modalId === 'orderModal') {
                        document.getElementById('modalItems').innerHTML = '';
                    } else if (modalId === 'cancelModal') {
                        document.getElementById('cancelComment').value = '';
                    } else if (modalId === 'returnModal') {
                        document.getElementById('returnComment').value = '';
                    }
                }

                window.onclick = function (event) {
                    const modals = document.querySelectorAll('.modal');
                    modals.forEach(modal => {
                        if (event.target === modal) {
                            modal.style.display = 'none';
                        }
                    });
                };
            </script>
            <script>

                document.querySelectorAll('.pay-now-btn').forEach(button => {
                    button.addEventListener('click', function () {
                        const orderId = this.getAttribute('data-order-id');


                        fetch(`/get-order-details/${orderId}`)
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Failed to fetch order details');
                                }
                                return response.json();
                            })
                            .then(orderData => {
                                const items = orderData.order.items;


                                fetch('/retry-payment', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({ orderId }),
                                })
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error(`Retry Payment API failed: ${response.statusText}`);
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        if (data.success && data.orderId) {
                                            const options = {
                                                key: data.key,
                                                amount: data.amount,
                                                currency: 'INR',
                                                name: 'CROWNIFY',
                                                description: 'Retry Payment',
                                                order_id: data.orderId,
                                                handler: function (response) {


                                                    fetch('/update-order-status', {
                                                        method: 'POST',
                                                        headers: {
                                                            'Content-Type': 'application/json',
                                                        },
                                                        body: JSON.stringify({
                                                            orderNumber: data.orderNumber,
                                                            paymentId: response.razorpay_payment_id,
                                                            items: items
                                                        }),
                                                    })
                                                        .then(updateResponse => {
                                                            if (!updateResponse.ok) {
                                                                throw new Error(`Failed to update order status: ${updateResponse.statusText}`);
                                                            }
                                                            return updateResponse.json();
                                                        })
                                                        .then(updateData => {

                                                            Swal.fire({
                                                                icon: 'success',
                                                                title: 'Payment Successful',
                                                                text: 'Your payment has been processed successfully.',
                                                                confirmButtonText: 'OK'
                                                            }).then(() => {
                                                                location.reload();
                                                            });
                                                        })
                                                        .catch(error => {
                                                            Swal.fire({
                                                                icon: 'error',
                                                                title: 'Error',
                                                                text: 'There was an issue updating your order status. Please try again later.',
                                                                confirmButtonText: 'OK'
                                                            });
                                                        });
                                                },
                                                prefill: {
                                                    name: 'Customer Name',
                                                    email: 'customer@example.com',
                                                    contact: '1234567890'
                                                },
                                                theme: {
                                                    color: '#F37254'
                                                }
                                            };

                                            const rzp1 = new Razorpay(options);
                                            rzp1.open();
                                        } else {
            
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Payment Failed',
                                                text: 'Unable to initiate payment. Please try again later.',
                                                confirmButtonText: 'OK'
                                            });
                                        }
                                    })
                                    .catch(error => {
                              
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Error',
                                            text: 'There was an issue processing your payment. Please try again later.',
                                            confirmButtonText: 'OK'
                                        });
                                    });
                            })
                            .catch(error => {
                      
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'Unable to fetch order details. Please try again later.',
                                    confirmButtonText: 'OK'
                                });
                            });
                    });
                });
            </script>
            <script>
                async function checkUserBlockStatus() {
                    try {
                        const response = await fetch("/check-block-status", {
                            method: "GET",
                            headers: {
                                "Content-Type": "application/json",
                            },
                        });
                        const data = await response.json();

                        if (data.blocked) {

                            window.location.href = "/login";
                        }
                    } catch (error) {
                        console.error("Error checking block status:", error);
                    }
                }


                setInterval(checkUserBlockStatus, 2000);
            </script>
            <script>
                document.addEventListener("DOMContentLoaded", () => {
                    const invoiceButtons = document.querySelectorAll(".invoice-btn");

                    invoiceButtons.forEach((button) => {
                        button.addEventListener("click", () => {
                            const orderId = button.getAttribute("data-order-id");
                            if (orderId) {

                                window.location.href = `/invoice/${orderId}`;
                            } else {
                                alert("Order ID is missing!");
                            }
                        });
                    });
                });
            </script>