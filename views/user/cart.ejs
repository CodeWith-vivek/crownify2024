<%- include("../../views/partials/user/headercart") %>
    <section class="breadcrumb-option">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="breadcrumb__text">
                        <h4 style="font-size: 24px; font-family: 'Nunito Sans';">Shop</h4>
                        <div class="breadcrumb__links">
                            <a href="/">Home</a>
                            <span>Shop</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="shopping-cart spad" style="    margin-left: 50px;
    margin-right: 50px;">
        <div class="container-fluid">
            <div class="row justify-content-center">
                <div class="col-lg-9" style=" padding-top: 28px;  margin-left: 35px; margin-right: 12px;">
                    <% if (isCartEmpty) { %>
                        <div class="empty-cart-section">
                            <div class="empty-cart-content">
                                <img src="/assets/images/Empty_Cart.png" alt="Empty Cart" class="empty-cart-image mb-4">
                                <h2>Your Cart is Empty</h2>

                                <% if (!isGuest) { %>
                                    <p>Looks like you haven't added any items to your cart yet.</p>
                                    <% } else { %>
                                        <p>Looks like you not logged in yet. You need to login to have access to cart or
                                            to purchase item .</p>
                                        <% } %>
                                            <div class="empty-cart-actions">
                                                <a href="/" class="btn btn-primary"
                                                    style="background-color: black;">Continue Shopping</a>
                                                <% if (!isGuest) { %>
                                                    <a href="/wishlist" class="btn btn-secondary">View Wishlist</a>
                                                    <% } %>
                                            </div>
                            </div>
                        </div>
                        <% } else { %>
                            <div class="shopping__cart__table">

                                <table class="table table-responsive cart-table">
                                    <thead>
                                        <tr>
                                            <th style="width: 24%;">Product</th>
                                            <th>Brand</th>
                                            <th>size</th>
                                            <th>Color</th>
                                            <th>Category</th>

                                            <th>Quantity</th>
                                            <th>Status</th>
                                            <th>Subtotal</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% cartItems.forEach(item=> { %>
                                            <tr class="cart-item">
                                                <td class="product-details d-flex col">
                                                    <img src="<%= item.product.productImage && item.product.productImage[0] ? '/uploads/product-image/' + item.product.productImage[0] : '/path/to/default-image.jpg' %>"
                                                        alt="<%= item.product.productName %>" class="img-fluid " style="padding-right:4px;     max-width: 49%;
    height: 38px;
">
                                                    <div class="product-info">
                                                        <h6>
                                                            <%= item.product.productName %>
                                                        </h6>
                                                        <p>Sale Price: <b>
                                                                <%= item.product.salePrice %>
                                                            </b>
                                                        </p>
                                                    </div>
                                                </td>
                                                <td class="product-color">
                                                    <p>
                                                        <%= item.productBrand %>
                                                    </p>
                                                </td>
                                                <td class="product-color">
                                                    <p>
                                                        <%= item.size %>
                                                    </p>
                                                </td>
                                                <td class="product-color">
                                                    <p>
                                                        <%= item.color %>
                                                    </p>
                                                </td>
                                                <td class="product-color">
                                                    <p>
                                                        <%= item.productCategory %>
                                                    </p>
                                                </td>

                                                <td class="product-quantity">
                                                    <div class="quantity-control d-flex col">
                                                        <button class="qty-btn decrease-qty"
                                                            data-product-id="<%= item.product._id %>"
                                                            data-size="<%= item.size %>" data-color="<%= item.color %>"
                                                            style="border: none;">-</button>

                                                        <input style="    width: 48px; border: none;" type="number"
                                                            value="<%= item.quantity %>" readonly min="1" max="6"
                                                            id="quantityInput_<%= item.product._id %>_<%= item.size %>_<%= item.color %>"
                                                            class="quantity-input" style="border: none;"
                                                            data-max-stock="<%= item.selectedVariantStockLevel %>">

                                                        <button class="qty-btn increase-qty"
                                                            data-product-id="<%= item.product._id %>"
                                                            data-size="<%= item.size %>" data-color="<%= item.color %>"
                                                            style="border: none;">+</button>
                                                    </div>
                                                </td>

                                                <td class="product-status">
                                                    <p class="stock-status" data-product-id="<%= item.product._id %>"
                                                        data-size="<%= item.size %>" data-color="<%= item.color %>"
                                                        style="color: 
                                                        <%= item.selectedVariantStockLevel === 0 ? 'rgb(237, 50, 50)' : 
                                                            (item.selectedVariantStockLevel > 0 && item.selectedVariantStockLevel <= 10 ? 'rgb(255, 165, 0)' : 'rgb(32, 167, 32)') %>;">
                                                        <%= item.selectedVariantStockLevel===0 ? 'Out of Stock' :
                                                            (item.selectedVariantStockLevel> 0 &&
                                                            item.selectedVariantStockLevel <= 10 ?
                                                                item.selectedVariantStockLevel + '' +
                                                                (item.selectedVariantStockLevel> 1 ? '' : '') + ' left'
                                                                : 'In Stock') %>
                                                    </p>
                                                </td>
                                                <td class="product-total" data-product-id="<%= item.product._id %>"
                                                    data-size="<%= item.size %>" data-color="<%= item.color %>">
                                                    â‚¹<%= item.itemTotal.toFixed(2) %>
                                                </td>
                                                <td class="cart__close" data-product-id="<%= item.product._id %>"><i
                                                        class="fa fa-close"></i></td>
                                            </tr>
                                            <% }); %>
                                    </tbody>
                                </table>
                            </div>
                            <div class="row">
                                <div class="col-lg-6 col-md-6 col-sm-6">
                                    <div class="continue__btn" style="margin-left: 35px;">
                                        <a href="/shop">Continue Shopping</a>
                                    </div>
                                </div>

                            </div>

                </div>

                <div class="cart-summary "
                    style="  background-color: #f3efe9; padding: 20px 20px 20px 20px; margin-top: 30px;">
                    <div class="summary-card">
                        <h6 class="text-center"><b>CART TOTAL</b></h6>

                        <ul class="list-unstyled col-12">
                            <li class="summary-row d-flex justify-content-between">
                                <span style="width: 100px;">Sale Price Subtotal</span>
                                <span style="color: #f94242; margin-top: 15px;"><b>â‚¹<%= subtotal.toFixed(2) %>
                                            </b></span>
                            </li>
                            <!-- <li class="summary1-row d-flex justify-content-between">
                                    <span>Discount</span>
                                    <span style="color: #1acf20;"><b>â‚¹0</b></span>
                                </li> -->
                            <li class="summary-row d-flex justify-content-between">
                                <span>Shipping</span>
                                <span>â‚¹<%= shippingCharge.toFixed(2) %></span>
                            </li>
                            <li class="summary-row total d-flex justify-content-between">
                                <span>Total</span>
                                <strong style="color: #f94242;">â‚¹<%= total.toFixed(2) %></strong>
                            </li>
                        </ul>
                        <a href="/checkout" class="btn btn-primary w-100 "
                            style="border-radius: 0px; background-color: black;">Proceed to
                            Checkout</a>
                    </div>
                </div>
            </div>
            <% } %>
        </div>
        </div>
    </section>


    <%- include("../../views/partials/user/footershop") %>
        <script>
            // document.addEventListener('DOMContentLoaded', () => {
            //     const checkoutButton = document.querySelector('a[href="/checkout"]');

            //     if (checkoutButton) {
            //         checkoutButton.addEventListener('click', async function (e) {
            //             e.preventDefault();

            //             try {

            //                 const cartItems = document.querySelectorAll('.cart-item');
            //                 let hasClientSideOutOfStock = false;
            //                 let clientSideOutOfStockProducts = [];

            //                 cartItems.forEach(item => {
            //                     const stockStatus = item.querySelector('.stock-status');
            //                     const productName = item.querySelector('.product-info h6').textContent.trim();

            //                     if (stockStatus && stockStatus.textContent.trim() === 'Out of Stock') {
            //                         hasClientSideOutOfStock = true;
            //                         clientSideOutOfStockProducts.push(productName);
            //                     }
            //                 });

            //                 if (hasClientSideOutOfStock) {
            //                     Swal.fire({
            //                         title: 'Out of Stock Items Detected',
            //                         html: `
            //                 <p>Please remove the following out of stock items from your cart to proceed to checkout:</p>
            //                 <ul style="list-style: none; padding: 0;">
            //                     ${clientSideOutOfStockProducts.map(product => `<li style="margin: 5px 0;">${product}</li>`).join('')}
            //                 </ul>
            //             `,
            //                         icon: 'warning',
            //                         confirmButtonText: 'OK'
            //                     });
            //                     return;
            //                 }

            //                 const response = await fetch('/checkout/validate', {
            //                     method: 'POST',
            //                     headers: {
            //                         'Content-Type': 'application/json'
            //                     }
            //                 });

            //                 const data = await response.json();

            //                 if (!data.success) {

            //                     Swal.fire({
            //                         title: 'Stock Validation Failed',
            //                         html: `
            //                 <p>${data.message}</p>
            //                 ${data.outOfStockItems ? `
            //                     <p>The following items are out of stock:</p>
            //                     <ul style="list-style: none; padding: 0;">
            //                         ${data.outOfStockItems.map(item => `
            //                             <li style="margin: 5px 0;">
            //                                 ${item.productName} (Size: ${item.size}, Color: ${item.color})
            //                             </li>
            //                         `).join('')}
            //                     </ul>
            //                 ` : ''}
            //             `,
            //                         icon: 'error',
            //                         confirmButtonText: 'OK'
            //                     });
            //                 } else {

            //                     window.location.href = '/checkout';
            //                 }

            //             } catch (error) {
            //                 console.error('Error during checkout validation:', error);
            //                 Swal.fire({
            //                     title: 'Error',
            //                     text: 'An error occurred while validating your cart. Please try again.',
            //                     icon: 'error',
            //                     confirmButtonText: 'OK'
            //                 });
            //             }
            //         });
            //     }
            // });

            // document.addEventListener('DOMContentLoaded', () => {
            //         const checkoutButton = document.querySelector('a[href="/checkout"]');

            //         if (checkoutButton) {
            //             checkoutButton.addEventListener('click', async function (e) {
            //                 e.preventDefault();

            //                 try {
            //                     console.log("Checkout button clicked");

            //                     // Check for client-side out-of-stock items
            //                     const cartItems = document.querySelectorAll('.cart-item');
            //                     console.log(`Found ${cartItems.length} items in the cart`);

            //                     let hasClientSideOutOfStock = false;
            //                     let clientSideOutOfStockProducts = [];

            //                     cartItems.forEach(item => {
            //                         const stockStatus = item.querySelector('.stock-status');
            //                         const productName = item.querySelector('.product-info h6').textContent.trim();

            //                         console.log(`Checking product: ${productName}`);
            //                         if (stockStatus) {
            //                             console.log(`Stock status: ${stockStatus.textContent.trim()}`);
            //                         }

            //                         if (stockStatus && stockStatus.textContent.trim() === 'Out of Stock') {
            //                             console.log(`Product is out of stock: ${productName}`);
            //                             hasClientSideOutOfStock = true;
            //                             clientSideOutOfStockProducts.push(productName);
            //                         }
            //                     });

            //                     if (hasClientSideOutOfStock) {
            //                         console.log("Client-side out-of-stock items detected:", clientSideOutOfStockProducts);
            //                         Swal.fire({
            //                             title: 'Out of Stock Items Detected',
            //                             html: `
            //                 <p>Please remove the following out-of-stock items from your cart to proceed to checkout:</p>
            //                 <ul style="list-style: none; padding: 0;">
            //                     ${clientSideOutOfStockProducts.map(product => `<li style="margin: 5px 0;">${product}</li>`).join('')}
            //                 </ul>
            //             `,
            //                             icon: 'warning',
            //                             confirmButtonText: 'OK'
            //                         });
            //                         return;
            //                     }

            //                     // Send request to server for validation
            //                     console.log("No client-side out-of-stock items detected. Sending validation request to server...");

            //                     const response = await fetch('/checkout/validate', {
            //                         method: 'POST',
            //                         headers: {
            //                             'Content-Type': 'application/json'
            //                         }
            //                     });

            //                     const data = await response.json();
            //                     console.log("Server validation response:", data);

            //                     if (!data.success) {
            //                         console.log("Validation failed on server:", data);

            //                         Swal.fire({
            //                             title: 'Stock Validation Failed',
            //                             html: `
            //                 <p>${data.message}</p>
            //                 ${data.outOfStockItems ? `
            //                     <p>The following items are out of stock:</p>
            //                     <ul style="list-style: none; padding: 0;">
            //                         ${data.outOfStockItems.map(item => `
            //                             <li style="margin: 5px 0;">
            //                                 ${item.productName} (Size: ${item.size}, Color: ${item.color})
            //                             </li>
            //                         `).join('')}
            //                     </ul>
            //                 ` : ''}
            //             `,
            //                             icon: 'error',
            //                             confirmButtonText: 'OK'
            //                         });
            //                     } else {
            //                         console.log("Validation successful. Redirecting to checkout...");
            //                         // window.location.href = '/checkout';
            //                     }

            //                 } catch (error) {
            //                     console.error('Error during checkout validation:', error);
            //                     Swal.fire({
            //                         title: 'Error',
            //                         text: 'An error occurred while validating your cart. Please try again.',
            //                         icon: 'error',
            //                         confirmButtonText: 'OK'
            //                     });
            //                 }
            //             });
            //         } else {
            //             console.log("Checkout button not found on the page");
            //         }
            //     });

            document.addEventListener("DOMContentLoaded", () => {
                const checkoutButton = document.querySelector('a[href="/checkout"]');

                if (checkoutButton) {
                    checkoutButton.addEventListener("click", async function (e) {
                        e.preventDefault();

                        try {
                            const cartItems = document.querySelectorAll(".cart-item");
                            let hasClientSideOutOfStock = false;
                            let clientSideOutOfStockProducts = [];

                            cartItems.forEach((item) => {
                                const stockStatus = item.querySelector(".stock-status");
                                const productName = item.querySelector(".product-info h6").textContent.trim();

                                if (stockStatus && stockStatus.textContent.trim() === "Out of Stock") {
                                    hasClientSideOutOfStock = true;
                                    clientSideOutOfStockProducts.push(productName);
                                }
                            });

                            if (hasClientSideOutOfStock) {
                                Swal.fire({
                                    title: "Out of Stock Items Detected",
                                    html: `
              <p>Please remove the following out-of-stock items from your cart to proceed to checkout:</p>
              <ul>
                ${clientSideOutOfStockProducts.map((product) => `<li>${product}</li>`).join("")}
              </ul>
            `,
                                    icon: "warning",
                                    confirmButtonText: "OK",
                                });
                                return;
                            }

                            const response = await fetch("/checkout/validate", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                },
                            });

                            const data = await response.json();

                            if (!data.success) {
                                Swal.fire({
                                    title: "Validation Failed",
                                    html: `
              <p>${data.message}</p>
              ${data.outOfStockItems.length > 0 ? `
                <p>Out of stock items:</p>
                <ul>
                  ${data.outOfStockItems.map(item => `
                    <li>
                      ${item.productName} (Size: ${item.size || "N/A"}, Color: ${item.color || "N/A"}) - ${item.message}
                    </li>
                  `).join("")}
                </ul>
              ` : ""}
              ${data.blockedItems.length > 0 ? `
                <p>Blocked items:</p>
                <ul>
                  ${data.blockedItems.map(item => `
                    <li>
                      ${item.productName} - ${item.reason}
                    </li>
                  `).join("")}
                </ul>
              ` : ""}
            `,
                                    icon: "error",
                                    confirmButtonText: "OK",
                                }).then(() => {
                                    // Reload the page after the user acknowledges the alert
                                    location.reload();
                                });
                            } else {
                                window.location.href = "/checkout";
                            }
                        } catch (error) {
                            console.error("Error during checkout validation:", error);
                            Swal.fire({
                                title: "Error",
                                text: "An error occurred while validating your cart. Please try again.",
                                icon: "error",
                                confirmButtonText: "OK",
                            });
                        }
                    });
                }
            });
            document.addEventListener('DOMContentLoaded', () => {
                const cartLinks = document.querySelectorAll('.site-header__cart');

                cartLinks.forEach(link => {
                    link.addEventListener('click', (e) => {
                        console.log('Cart link clicked');


                        e.stopPropagation();


                        window.location.href = '/cart';


                        e.preventDefault();
                    });
                });
            });

            document.addEventListener('DOMContentLoaded', () => {
                const decreaseButtons = document.querySelectorAll('.decrease-qty');
                const increaseButtons = document.querySelectorAll('.increase-qty');

                decreaseButtons.forEach(button => {
                    button.addEventListener('click', () => {
                        const productId = button.getAttribute('data-product-id');
                        const size = button.getAttribute('data-size');
                        const color = button.getAttribute('data-color');
                        const quantityInput = document.getElementById(`quantityInput_${productId}_${size}_${color}`);
                        let currentQuantity = parseInt(quantityInput.value);

                        if (currentQuantity > 1) {
                            currentQuantity--;
                            quantityInput.value = currentQuantity;
                            updateCartQuantity(productId, size, color, currentQuantity);
                            updateStockStatus(productId, size, color, currentQuantity);
                        }
                    });
                });
                increaseButtons.forEach(button => {
                    button.addEventListener('click', () => {
                        const productId = button.getAttribute('data-product-id');
                        const size = button.getAttribute('data-size');
                        const color = button.getAttribute('data-color');
                        const quantityInput = document.getElementById(`quantityInput_${productId}_${size}_${color}`);
                        let currentQuantity = parseInt(quantityInput.value);
                        const maxStock = parseInt(quantityInput.getAttribute('data-max-stock'));

                        if (currentQuantity < 6 && currentQuantity < maxStock) {
                            currentQuantity++;
                            quantityInput.value = currentQuantity;
                            updateCartQuantity(productId, size, color, currentQuantity);
                            updateStockStatus(productId, size, color, currentQuantity);
                        } else if (currentQuantity >= maxStock) {
                            Swal.fire({
                                title: 'Stock Limit Reached',
                                text: `You cannot add more than ${maxStock} of this item.`,
                                icon: 'warning',
                                confirmButtonText: 'OK'
                            });
                        } else if (currentQuantity >= 6) {
                            Swal.fire({
                                title: 'Quantity Limit Reached',
                                text: 'You cannot add more than 6 of this item at a time.',
                                icon: 'warning',
                                confirmButtonText: 'OK'
                            });
                        }
                    });
                });


                function updateCartQuantity(productId, size, color, quantity) {
                    fetch(`/cart/update`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ productId, size, color, quantity })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                console.log('Cart updated successfully:', data);


                                const itemRow = document.querySelector(`tr.cart-item td.product-total[data-product-id="${productId}"][data-size="${size}"][data-color="${color}"]`);
                                if (itemRow) {
                                    itemRow.textContent = `â‚¹${parseFloat(data.itemTotal).toFixed(2)}`;
                                }


                                updateCartSummary(data.cartSummary);
                            } else {
                                console.error('Error updating cart:', data.message);
                            }
                        })
                        .catch(error => console.error('Error:', error));
                }


                function updateCartSummary(summary) {

                    const subtotalElement = document.querySelector('.summary-row span:nth-child(2)');
                    if (subtotalElement) {
                        subtotalElement.textContent = `â‚¹${parseFloat(summary.subtotal).toFixed(2)}`;
                    }


                    const shippingElement = document.querySelector('.summary-row:nth-child(2) span:nth-child(2)');
                    if (shippingElement) {
                        shippingElement.textContent = `â‚¹${parseFloat(summary.shippingCharge).toFixed(2)}`;
                    }


                    const totalElement = document.querySelector('.summary-row.total strong:nth-child(2)');
                    if (totalElement) {
                        totalElement.textContent = `â‚¹${parseFloat(summary.total).toFixed(2)}`;
                    }
                }


            });

            document.addEventListener('DOMContentLoaded', () => {

                const removeButtons = document.querySelectorAll('.cart__close');

                removeButtons.forEach(button => {
                    button.addEventListener('click', () => {
                        const productId = button.getAttribute('data-product-id');
                        const row = button.closest('tr.cart-item');
                        const size = row.querySelector('td:nth-child(3) p').innerText;
                        const color = row.querySelector('.product-color:nth-child(4) p').innerText;


                        Swal.fire({
                            title: 'Are you sure?',
                            text: "You won't be able to revert this!",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes, remove it!'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                removeCartItem(productId, size, color);
                            }
                        });
                    });
                });

                function removeCartItem(productId, size, color) {
                    console.log('Removing item with details:');
                    console.log('Product ID:', productId);
                    console.log('Size:', size);
                    console.log('Color:', color);
                    fetch(`/cart/remove`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ productId, size, color }),


                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                console.log('Item removed successfully:', data);

                                const row = document.querySelector(`tr.cart-item[data-product-id="${productId}"]`);
                                if (row) {
                                    row.remove();
                                }

                                Swal.fire(
                                    'Removed!',
                                    'Your item has been removed from the cart.',
                                    'success'
                                ).then(() => {

                                    location.reload();
                                });
                            } else {
                                console.error('Error removing item:', data.message);
                                Swal.fire(
                                    'Error!',
                                    'There was a problem removing the item.',
                                    'error'
                                );
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire(
                                'Error!',
                                'There was a problem removing the item.',
                                'error'
                            );
                        });
                }
            });



        </script>

        <script>
            async function checkUserBlockStatus() {
                try {
                    const response = await fetch("/check-block-status", {
                        method: "GET",
                        headers: {
                            "Content-Type": "application/json",
                        },
                    });
                    const data = await response.json();

                    if (data.blocked) {

                        window.location.href = "/login"; // Redirect to the login page or home page
                    }
                } catch (error) {
                    console.error("Error checking block status:", error);
                }
            }

            // Check every 30 seconds
            setInterval(checkUserBlockStatus, 2000);
        </script>
        