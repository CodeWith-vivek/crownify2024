<%- include("../../views/partials/admin/header2") %>

<section class="content-main">
    <div class="content-header">
        <h2 class="content-title card-title">Coupon Management</h2>
        <p>Add, edit, or delete coupons efficiently</p>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="row">
                <!-- Add Coupon Form -->
                <div class="col-md-3">
                    <form id="add-coupon-form" onsubmit="return validateForm()">
                        <div class="mb-3">
                            <label for="coupon-code" class="form-label">Coupon Code</label>
                            <input type="text" class="form-control" id="coupon-code" name="code" required maxlength="20"
                                placeholder="Enter coupon code">
                            <span class="text-danger" id="code-error"></span>
                        </div>

                        <div class="mb-3">
                            <label for="discount-type" class="form-label">Discount Type</label>
                            <select class="form-select" id="discount-type" name="discountType" required>
                                <option value="">Select type</option>
                                <option value="percentage">Percentage</option>
                                <option value="fixed">Fixed Amount</option>
                            </select>
                            <span class="text-danger" id="type-error"></span>
                        </div>

                        <div class="mb-3">
                            <label for="discount-amount" class="form-label">Discount Amount</label>
                            <input type="number" class="form-control" id="discount-amount" name="discountAmount"
                                required min="0" step="0.01" placeholder="Enter discount amount">
                            <span class="text-danger" id="amount-error"></span>
                        </div>

                        <div class="mb-3">
                            <label for="max-discount" class="form-label">Max Discount</label>
                            <input type="number" class="form-control" id="max-discount" name="maxDiscount" min="0"
                                step="0.01" placeholder="Enter max discount">
                            <span class="text-danger" id="max-error"></span>
                        </div>

                        <div class="mb-3">
                            <label for="min-purchase" class="form-label">Min Purchase</label>
                            <input type="number" class="form-control" id="min-purchase" name="minPurchase" required
                                min="0" step="0.01" placeholder="Enter minimum purchase amount">
                            <span class="text-danger" id="min-error"></span>
                        </div>

                        <div class="mb-3">
                            <label for="expiry-date" class="form-label">Expiry Date</label>
                            <input type="date" class="form-control" id="expiry-date" name="expiryDate" required>
                            <span class="text-danger" id="expiry-error"></span>
                        </div>

                        <div class="mb-3">
                            <label for="usage-limit" class="form-label">Usage Limit</label>
                            <input type="number" class="form-control" id="usage-limit" name="usageLimit" required
                                min="0" placeholder="Enter usage limit">
                            <span class="text-danger" id="usage-error"></span>
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" maxlength="500"
                                placeholder="Enter a brief description of the coupon"></textarea>
                            <span class="text-danger" id="description-error"></span>
                        </div>

                        <button type="submit" class="btn btn-custom text-white" style="background-color: brown;"
                            id="add-coupon-btn" disabled>
                            Add Coupon
                        </button>
                    </form>
                </div>

                <!-- Coupon List -->
                <div class="col-md-9">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Code</th>
                                    <th>Discount</th>
                                    <th>Max Discount</th>
                                    <th>Min Purchase</th>
                                    <th>Description</th>
                                    <th>Expiry</th>
                                    <th>Usage Limit</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="coupon-list">
                                <!-- Dynamic rows will be added here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

    <%- include("../../views/partials/admin/footer2") %>

        <script>
            // Load Coupons
            async function loadCoupons() {
                try {
                    const response = await fetch('/admin/get-coupons');
                    if (!response.ok) {
                        throw new Error('Failed to fetch coupons');
                    }
                    const coupons = await response.json();
                    renderCoupons(coupons);
                } catch (error) {
                    console.error('Error loading coupons:', error);
                    alert('Failed to load coupons');
                }
            }

            // Render Coupons
            function renderCoupons(coupons) {
                const couponList = document.getElementById('coupon-list');
                couponList.innerHTML = '';
                coupons.forEach((coupon) => {
                    const row = `
  <tr>
    <td class="coupon-text"> ${coupon.code}</td>  <td>${coupon.discountType === 'percentage' ? coupon.discountAmount + '%' : '₹' + coupon.discountAmount}</td>
    <td>${coupon.maxDiscount ? '₹' + coupon.maxDiscount : 'N/A'}</td>
    <td>₹${coupon.minPurchase}</td>
      <td>${coupon.description}</td>
    <td>${new Date(coupon.expiryDate).toLocaleDateString()}</td>
    <td>${coupon.usageLimit}</td>
    <td>
         <button class="btn btn-warning btn-sm" onclick="editCoupon('${coupon._id}')">Edit</button>
      <button class="btn btn-danger btn-sm" onclick="deleteCoupon('${coupon._id}')">Delete</button>
    </td>
  </tr>
`;
                    couponList.innerHTML += row;
                });
            }

            // Add Coupon
            async function addCoupon(event) {
                event.preventDefault();
                const formData = new FormData(event.target);
                const payload = Object.fromEntries(formData.entries());

            
                 try {
                    const response = await fetch('/admin/add-coupon', {
                         method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(payload), // ... (existing code) ...
                    });

                    const result = await response.json();

                    if (response.ok) {
                        loadCoupons();
                        event.target.reset();
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: result.message || 'Coupon added successfully!'
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: result.message || 'Failed to add coupon'
                        });
                    }
                } catch (error) {
                    console.error('Error adding coupon:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: 'Error adding coupon: ' + error.message
                    });
                }
                
            }

            // Delete Coupon
           async function deleteCoupon(id) {
                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: 'This action cannot be undone.',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, delete it!',
                    cancelButtonText: 'No, cancel'
                });

                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/admin/coupons/${id}`, { method: 'DELETE' });
                        const result = await response.json();

                        if (response.ok) {
                            loadCoupons();
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: result.message || 'Coupon deleted successfully!'
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: result.message || 'Failed to delete coupon'
                            });
                        }
                    } catch (error) {
                        console.error('Error deleting coupon:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'Error deleting coupon: ' + error.message
                        });
                    }
                }
            }
            async function editCoupon(id) {
                    window.location.href = `/admin/edit-coupon/${id}`;
                }
        
            // Initialize
            document.getElementById('add-coupon-form').addEventListener('submit', addCoupon);
            loadCoupons();
        </script>
        <script>
            // Function to validate the form
           function validateForm() {
                let isValid = true;

                // Clear previous error messages
                document.querySelectorAll('.text-danger').forEach(element => {
                    element.textContent = '';
                });

                // Validate Coupon Code
                const code = document.getElementById('coupon-code').value.trim();
                if (code === '') {
                    document.getElementById('code-error').textContent = 'Coupon code is required.';
                    isValid = false;
                }

                // Validate Discount Type
                const discountType = document.getElementById('discount-type').value;
                if (discountType === '') {
                    document.getElementById('type-error').textContent = 'Discount type is required.';
                    isValid = false;
                }

                // Validate Discount Amount
                const discountAmount = parseFloat(document.getElementById('discount-amount').value);
                if (isNaN(discountAmount) || discountAmount < 0) {
                    document.getElementById('amount-error').textContent = 'Discount amount must be a positive number.';
                    isValid = false;
                }

                // Validate Max Discount (optional)
              const maxDiscountInput = document.getElementById('max-discount').value.trim();
               if (maxDiscountInput !== '') { // Only validate if not empty
                   const maxDiscount = parseFloat(maxDiscountInput);
                   if (isNaN(maxDiscount) || maxDiscount < 0) {
                       document.getElementById('max-error').textContent = 'Max discount must be a positive number or zero.';
                       isValid = false;
                   }
               }

                // Validate Min Purchase
                const minPurchase = parseFloat(document.getElementById('min-purchase').value);
                if (isNaN(minPurchase) || minPurchase < 0) {
                    document.getElementById('min-error').textContent = 'Min purchase must be a positive number.';
                    isValid = false;
                }

                // Validate Expiry Date
                const expiryDate = document.getElementById('expiry-date').value;
                if (expiryDate === '') {
                    document.getElementById('expiry-error').textContent = 'Expiry date is required.';
                    isValid = false;
                }

                // Validate Usage Limit
               const usageLimit = parseInt(document.getElementById('usage-limit').value, 10);
               if (isNaN(usageLimit) || (usageLimit !== 0 && usageLimit < 1)) {
                   document.getElementById('usage-error').textContent = 'Usage limit must be at least 1 or 0 for unlimited usage.';
                   isValid = false;
               }

                // Validate Description
              const description = document.getElementById('description').value.trim();
               if (description.length === 0) {
                   document.getElementById('description-error').textContent = 'Description is required.';
                   isValid = false;
               } else if (description.length > 500) {
                   document.getElementById('description-error').textContent = 'Description cannot exceed 500 characters.';
                   isValid = false;
               } else {
                   document.getElementById('description-error').textContent = ''; // Clear error if valid
               }

                return isValid; // Prevent form submission if invalid
            }

            // Enable Add Coupon button only if the form is valid
            document.getElementById('add-coupon-form').addEventListener('input', function () {
                const isFormValid = validateForm();
                document.getElementById('add-coupon-btn').disabled = !isFormValid;
            });
        </script>