<%- include("../../views/partials/admin/headerdashboard") %>
    <section class="content-main">
        <div class="content-header">
            <div>
                <h2 class="content-title card-title">Dashboard </h2>
                <p>Whole data about your business here</p>
            </div>

        </div>
        <div class="row">
            <div class="col-lg-3">

                <div class="card card-body mb-4 clo-lg-4">
                    <article class="icontext">
                        <span class="icon icon-sm rounded-circle bg-primary-light">
                            <i class="text-primary material-icons md-monetization_on"></i>
                        </span>
                        <div class="text">
                            <h6 class="mb-1 card-title">Revenue</h6>
                            <span id="total-revenue">Loading...</span>

                        </div>
                    </article>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="card card-body mb-4">
                    <article class="icontext">
                        <span class="icon icon-sm rounded-circle bg-success-light">
                            <i class="text-success material-icons md-local_shipping"></i>
                        </span>
                        <div class="text">
                            <h6 class="mb-1 card-title">Orders</h6>
                            <span id="total-orders">Loading...</span>

                        </div>
                    </article>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="card card-body mb-4">
                    <article class="icontext">
                        <span class="icon icon-sm rounded-circle bg-warning-light">
                            <i class="text-warning material-icons md-qr_code"></i>
                        </span>
                        <div class="text">
                            <h6 class="mb-1 card-title">Products</h6>
                            <span id="total-products">Loading...</span>
                            <span class="text-sm">
                                In <span id="total-categories">Loading...</span> Categories
                            </span>
                        </div>
                    </article>
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-xl-12 col-lg-12">
                <div class="card mb-4">
                    <article class="card-body">
                        <h5 class="card-title">Sale Statistics</h5>
                        <div>
                            <button id="weeklyBtn" class="btn btn-primary">Weekly</button>
                            <button id="monthlyBtn" class="btn btn-primary">Monthly</button>
                            <button id="yearlyBtn" class="btn btn-primary">Yearly</button>
                        </div>
                        <canvas id="myChart" height="120px"></canvas>
                    </article>
                </div>
            </div>
            <div class="col-lg-12">


         

                <div class="card mb-4">
                    <div class="card-header">
                        <h2 class="mb-0"><i class="fas fa-chart-line me-2"></i>Sales Report</h2>
                    </div>
                    <div class="card-body">
                        <form id="reportForm">
                            <div class="mb-3">
                                <label for="type" class="form-label">Select Report Type:</label>
                                <select id="type" name="type" class="form-select" required>
                                    <option value="">-- Select Report Type --</option>
                                    <option value="daily">Daily</option>
                                    <option value="weekly">Weekly</option>
                                    <option value="monthly">Monthly</option>
                                    <option value="yearly">Yearly</option>
                                    <option value="custom">Custom Date Range</option>
                                </select>
                            </div>

                            <div id="customDateRange" class="row g-3" style="display: none;">
                                <div class="col-md-6">
                                    <label for="startDate" class="form-label">Start Date:</label>
                                    <input type="date" id="startDate" name="startDate" class="form-control"
                                        onkeydown="return false" onkeypress="return false">
                                </div>
                                <div class="col-md-6">
                                    <label for="endDate" class="form-label">End Date:</label>
                                    <input type="date" id="endDate" name="endDate" class="form-control"
                                        onkeydown="return false" onkeypress="return false">
                                </div>
                            </div>
                            <div class="mt-3">
                                <button type="submit" class="btn btn-primary w-100">
                                    <i class="fas fa-file-alt me-2"></i>Generate Report
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

                <div id="reportResults" class="card" style="display: none;">
                
                    <div class="card-header">
                        <h3 class="mb-0"><i class="fas fa-table me-2"></i>Sales Report</h3>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Order Number</th>
                                        <th>Date</th>
                                        <th>Item Name</th>
                                        <th>Brand</th>
                                        <th>Color</th>
                                        <th>Size</th>
                                        <th>Category</th>
                                        <th>Quantity</th>
                                        <th>Regular Price (₹)</th>
                                        <th>Sale Price (₹)</th>
                                        <th>Item Discount (₹)</th>
                                        <th>Coupon Discount (₹)</th>
                                        <th>Item Total (₹)</th>
                                        <th>Shipping (₹)</th>
                                        <th>Order Total (₹)</th>
                                    </tr>
                                </thead>
                                <tbody id="reportData">
                                </tbody>
                                <tfoot id="reportTotals" style="display: none;">
                                    <tr>
                                        <th>Totals:</th>
                                        <th></th>
                                        <th></th>
                                        <th></th>
                                        <th></th>
                                        <th></th>
                                        <th></th>
                                        <th id="totalQuantity"></th>
                                        <th id="totalRegularPrice"></th>
                                        <th id="totalSalesprice"></th>
                                        <th id="totalOfferDiscount"></th>
                                        <th id="totalCouponDiscount"></th>
                                        <th id="totalItemTotal"></th>
                                        <th id="totalShipping"></th>
                                        <th id="totalOrderTotal"></th>
                                    </tr>
                                </tfoot>
                            </table>
                            <div id="pagination" class="mt-4 d-flex justify-content-center"></div>
                        </div>
                    </div>

                    <div class="card-footer">
                        <button id="downloadReport" class="btn btn-danger w-100">
                            <i class="fas fa-file-pdf me-2"></i>Download Report as PDF
                        </button>
                    </div>
                    <div class="mt-3">
                        <button id="downloadExcel" class="btn btn-success w-100">
                            <i class="fas fa-file-excel me-2"></i>Download Report as Excel
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <h4 class="mb-3"><i class="fas fa-box-open me-2"></i>Top 10 Best-Selling Products</h4>
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Rank</th>
                                    <th>Product Name</th>
                                    <th>Sales Count</th>

                                </tr>
                            </thead>
                            <tbody id="bestSellingProducts">
                                <tr>
                                    <td colspan="4">No data available</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Top 10 Best-Selling Categories -->
                <div class="card-body">
                    <h4 class="mb-3"><i class="fas fa-th-large me-2"></i>Top 10 Best-Selling Categories</h4>
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Rank</th>
                                    <th>Category Name</th>
                                    <th>Sales Count</th>

                                </tr>
                            </thead>
                            <tbody id="bestSellingCategories">
                                <tr>
                                    <td colspan="4">No data available</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Top 10 Best-Selling Brands -->
                <div class="card-body">
                    <h4 class="mb-3"><i class="fas fa-tag me-2"></i>Top 10 Best-Selling Brands</h4>
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Rank</th>
                                    <th>Brand Name</th>
                                    <th>Sales Count</th>

                                </tr>
                            </thead>
                            <tbody id="bestSellingBrands">
                                <tr>
                                    <td colspan="4">No data available</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

            </div>


    </section>

    <%- include("../../views/partials/admin/footer2") %>

        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
        <script>



        document.getElementById('reportForm').addEventListener('submit', async (event) => {
                event.preventDefault();

                const formData = new FormData(event.target);
                const data = {
                    ...Object.fromEntries(formData.entries()),
                    page: 1,
                    limit: 10
                };

                try {
                    const response = await fetch('/admin/sales-report', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data),
                    });

                    const result = await response.json();

                    if (result.status) {
                        renderReport(result);
                        document.getElementById('reportResults').style.display = 'block';

                        Swal.fire({
                            title: 'Success!',
                            text: 'Report generated successfully.',
                            icon: 'success',
                            confirmButtonText: 'Okay'
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: result.message || 'An error occurred while generating the report.',
                            icon: 'error',
                            confirmButtonText: 'Okay'
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'An internal error occurred. Please try again later.',
                        icon: 'error',
                        confirmButtonText: 'Okay'
                    });
                }
            });

            function renderReport(result) {
                const reportDataBody = document.getElementById('reportData');
                reportDataBody.innerHTML = '';

                result.report.forEach(order => {
                    order.items.forEach((item, index) => {
                        const row = document.createElement('tr');
                        const orderNumberLastFour = order.orderNumber.slice(-4);

                       
                        const cells = [];
                        if (index === 0) {
                            cells.push(
                                createCell(orderNumberLastFour),
                                createCell(order.date)
                            );
                        } else {
                            cells.push(
                                createCell(''),
                                createCell('')
                            );
                        }

                        cells.push(
                            createCell(item.name),
                            createCell(item.brand),
                            createCell(item.color),
                            createCell(item.size),
                            createCell(item.category),
                            createCell(item.quantity, 'text-end'),
                            createCell(`₹${item.regularPrice.toFixed(2)}`, 'text-end'),
                            createCell(`₹${item.salePrice.toFixed(2)}`, 'text-end'),
                            createCell(`₹${item.itemDiscount.toFixed(2)}`, 'text-end'),
                            createCell(`₹${item.couponDiscount.toFixed(2)}`, 'text-end'),
                            createCell(`₹${item.itemTotal.toFixed(2)}`, 'text-end'),
                            createCell(`₹${item.shipping.toFixed(2)}`, 'text-end'),
                            createCell(`₹${(item.itemTotal + item.shipping).toFixed(2)}`, 'text-end')
                        );

                 
                        cells.forEach(cell => row.appendChild(cell));
                        reportDataBody.appendChild(row);
                    });

                    const separatorRow = document.createElement('tr');
                    const separatorCell = document.createElement('td');
                    separatorCell.colSpan = 15;
                    separatorCell.className = 'border-bottom';
                    separatorRow.appendChild(separatorCell);
                    reportDataBody.appendChild(separatorRow);
                });

                updateTotals(result.totals);
                updatePagination(result.pagination);
            }

      
            function createCell(content, className = '') {
                const cell = document.createElement('td');
                cell.textContent = content;
                if (className) {
                    cell.className = className;
                }
                return cell;
            }

            function updateTotals(totals) {
          
                const totalsMapping = {
                    'totalQuantity': { value: totals.totalQuantity, format: false },
                    'totalRegularPrice': { value: totals.totalRegularPrice, format: true },
                    'totalSalesprice': { value: totals.totalSalePrice, format: true },
                    'totalItemTotal': { value: totals.totalItemTotal, format: true },
                    'totalShipping': { value: totals.totalShipping, format: true },
                    'totalCouponDiscount': { value: totals.totalCouponDiscount, format: true },
                    'totalOrderTotal': { value: totals.totalOrderTotal, format: true },
                    'totalOfferDiscount': { value: totals.totalItemDiscount, format: true }
                };

           
                Object.entries(totalsMapping).forEach(([id, { value, format }]) => {
                    const element = document.getElementById(id);
                    if (element) {
                        element.textContent = format ? `₹${value.toFixed(2)}` : value;
                        element.className = 'text-end'; 
                    }
                });

                document.getElementById('reportTotals').style.display = 'table-row-group';
            }

            function updatePagination(pagination) {
                const paginationContainer = document.getElementById('pagination');
                paginationContainer.innerHTML = `
        <nav aria-label="Report navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item ${!pagination.hasPrevPage ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="${pagination.currentPage - 1}" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
                <li class="page-item">
                    <span class="page-link">
                        Page ${pagination.currentPage} of ${pagination.totalPages}
                    </span>
                </li>
                <li class="page-item ${!pagination.hasNextPage ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="${pagination.currentPage + 1}" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>
    `;

             
                paginationContainer.querySelectorAll('.page-link[data-page]').forEach(link => {
                    link.addEventListener('click', handlePaginationClick);
                });
            }

            async function handlePaginationClick(e) {
                e.preventDefault();
                const page = parseInt(e.currentTarget.dataset.page);

                if (!e.currentTarget.parentElement.classList.contains('disabled')) {
                    const formData = new FormData(document.getElementById('reportForm'));
                    const data = {
                        ...Object.fromEntries(formData.entries()),
                        page,
                        limit: 10
                    };

                    try {
                        const response = await fetch('/admin/sales-report', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(data),
                        });

                        const result = await response.json();
                        if (result.status) {
                            renderReport(result);
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: result.message || 'An error occurred while fetching the report.',
                                icon: 'error',
                                confirmButtonText: 'Okay'
                            });
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        Swal.fire({
                            title: 'Error!',
                            text: 'An error occurred while fetching the next page.',
                            icon: 'error',
                            confirmButtonText: 'Okay'
                        });
                    }
                }
            }

            document.getElementById('type').addEventListener('change', function () {
                const customDateRange = document.getElementById('customDateRange');
                customDateRange.style.display = (this.value === 'custom') ? 'flex' : 'none';
            });


            document.getElementById('downloadReport').addEventListener('click', async () => {
                const reportType = document.getElementById('type').value;
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;

        
                const data = {
                    type: reportType,
                    startDate: startDate,
                    endDate: endDate
                };

                try {
                    const response = await fetch('/admin/sales-report/pdf', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data),
                    });

                    if (response.ok) {
                    
                        const blob = await response.blob();
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.style.display = 'none';
                        a.href = url;
                        a.download = `Sales_Report_${new Date().toISOString().slice(0, 10)}.pdf`;
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        a.remove();
                    } else {
                      
                        const result = await response.json();
                        console.error('Error generating PDF:', result.message || 'An error occurred while generating the PDF.');
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            });
            document.getElementById('downloadExcel').addEventListener('click', async () => {
                try {
                    const type = document.getElementById('type').value;
                    const startDate = document.getElementById('startDate').value;
                    const endDate = document.getElementById('endDate').value;

                    const data = { type, startDate, endDate };

                    const response = await fetch('/admin/sales-report/excel', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data),
                    });

                    if (response.ok) {
                        const blob = await response.blob();
                        const url = window.URL.createObjectURL(blob);

                  
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = 'sales_report.xlsx';
                        document.body.appendChild(a);
                        a.click();
                        a.remove();
                        window.URL.revokeObjectURL(url);

                        Swal.fire({
                            title: 'Success!',
                            text: 'Report downloaded successfully.',
                            icon: 'success',
                            confirmButtonText: 'Okay'
                        });
                    } else {
                        const error = await response.json();
                        Swal.fire({
                            title: 'Error!',
                            text: error.message || 'Failed to download the report.',
                            icon: 'error',
                            confirmButtonText: 'Okay'
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'An internal error occurred. Please try again later.',
                        icon: 'error',
                        confirmButtonText: 'Okay'
                    });
                }
            });

        </script>
        <script>
           
            document.getElementById('logoutLink').addEventListener('click', function (event) {
                event.preventDefault(); 

              
                fetch('/admin/logout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ action: 'logout' })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {

                            Swal.fire({
                                icon: 'success',
                                title: 'Logged Out',
                                text: data.message,
                                timer: 2000,
                                showConfirmButton: false
                            }).then(() => {

                                window.location.replace('/admin/login');
                            });
                        } else {

                            Swal.fire({
                                icon: 'error',
                                title: 'Logout Failed',
                                text: data.message,
                                confirmButtonText: 'Try Again'
                            });
                        }
                    })
                    .catch(error => {

                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred. Please try again later.',
                            confirmButtonText: 'Okay'
                        });
                    });
            });
        </script>

        <script>
          
            const ctx = document.getElementById('myChart').getContext('2d');
            let myChart;

         
            async function fetchSalesReport(timeframe) {
                try {
                    const response = await fetch('/admin/sales-chart', { 
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ type: timeframe }) 
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();
                    return data[timeframe]; 
                } catch (error) {
                    console.error('Error fetching sales report:', error);
                    return null; 
                }
            }

           
            async function renderChart(timeframe) {
                const data = await fetchSalesReport(timeframe); 

                if (!data) {
                    console.error('No data available');
                    return;
                }

                if (myChart) {
                    myChart.destroy(); 
                }

                myChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: data.labels,
                        datasets: [
                            {
                                label: 'Total Revenue',
                                data: data.revenue,
                                yAxisID: 'y',
                                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                borderColor: 'rgba(75, 192, 192, 1)',
                                borderWidth: 1
                            },
                            {
                                label: 'Total Orders',
                                data: data.orders,
                                yAxisID: 'y1',
                                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                borderColor: 'rgba(255, 99, 132, 1)',
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        scales: {
                            y: {
                                type: 'linear',
                                position: 'left',
                                title: {
                                    display: true,
                                    text: 'Revenue (₹)'
                                }
                            },
                            y1: {
                                type: 'linear',
                                position: 'right',
                                title: {
                                    display: true,
                                    text: 'Number of Orders'
                                },
                                grid: {
                                    drawOnChartArea: false
                                }
                            }
                        }
                    }
                });
            }

          
            document.getElementById('weeklyBtn').addEventListener('click', () => renderChart('weekly'));
            document.getElementById('monthlyBtn').addEventListener('click', () => renderChart('monthly'));
            document.getElementById('yearlyBtn').addEventListener('click', () => renderChart('yearly'));

          
            renderChart('weekly');
        </script>
        <script>
            document.addEventListener("DOMContentLoaded", async () => {
                const revenueElement = document.getElementById("total-revenue");

                try {
                 
                    const response = await fetch("/admin/overall-revenue"); 


                
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();
                 

                    if (data.status) {
                 
                        revenueElement.textContent = `₹${data.revenue.totalRevenue.toFixed(2)}`;
                     
                    } else {
                  
                        revenueElement.textContent = "No revenue data available";
                       
                    }
                } catch (error) {
                    console.error("Error fetching overall revenue:", error);
                    revenueElement.textContent = "Error loading revenue";
                }
            });
            document.addEventListener("DOMContentLoaded", async () => {
                const ordersElement = document.getElementById("total-orders");

                try {
                   
                    const response = await fetch("/admin/total-orders"); 
                    const data = await response.json();

                    if (data.status) {
                      
                        ordersElement.textContent = data.totalOrders.toLocaleString();
                    } else {
                     
                        ordersElement.textContent = "No orders received";
                    }
                } catch (error) {
                    console.error("Error fetching total orders:", error);
                    ordersElement.textContent = "Error loading orders";
                }
            });
            document.addEventListener("DOMContentLoaded", async () => {
                const productsElement = document.getElementById("total-products");
                const categoriesElement = document.getElementById("total-categories");

                try {
                  

                 
                    const response = await fetch("/admin/total-products"); 
                    

             
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();
                   

                    if (data.status) {
                    
                        productsElement.textContent = data.totalProducts.toLocaleString();
                     
                    } else {
                        productsElement.textContent = "No products available";
                      
                    }
                    const categoryResponse = await fetch("/admin/total-categories"); 
                    const categoryData = await categoryResponse.json();

                    if (categoryData.status) {
                        categoriesElement.textContent = categoryData.totalCategories.toLocaleString();
                    } else {
                        categoriesElement.textContent = "0";
                    }

                } catch (error) {
                    console.error("Error fetching total products:", error);
                    productsElement.textContent = "Error loading products";
                    categoriesElement.textContent = "Error loading categories";
                }
            });
        </script>
        <script>
            document.addEventListener("DOMContentLoaded", async () => {
                try {
                 
                    const response = await fetch("/admin/top-selling-stats");

                    if (!response.ok) {
                      
                        return;
                    }

                    const result = await response.json();
                   

                    if (result.success) {
                     

                     
                        const productTable = document.getElementById("bestSellingProducts");
                     
                        productTable.innerHTML = result.data.topProducts
                            .map(
                                (product, index) => `
                <tr>
                    <td>${index + 1}</td>
                    <td>${product.productName}</td>
                    <td>${product.salesCount}</td>
                </tr>
            `
                            )
                            .join("");

                     
                        const categoryTable = document.getElementById("bestSellingCategories");
                       
                        categoryTable.innerHTML = result.data.topCategories
                            .map(
                                (category, index) => `
                <tr>
                    <td>${index + 1}</td>
                    <td>${category.categoryName}</td>
                    <td>${category.salesCount}</td>
                </tr>
            `
                            )
                            .join("");

                        const brandTable = document.getElementById("bestSellingBrands");
                       
                        if (result.data.topBrands.length > 0) {
                            brandTable.innerHTML = result.data.topBrands
                                .map(
                                    (brand, index) => `
                <tr>
                    <td>${index + 1}</td>
                    <td>${brand.brandName || "Unknown Brand"}</td>
                    <td>${brand.salesCount || 0}</td>
                </tr>
            `
                                )
                                .join("");
                        } else {
                            brandTable.innerHTML = `<tr><td colspan="3">No brands found</td></tr>`;
                        }

                       
                    } else {
                     
                    }
                } catch (error) {
                    console.error("Error fetching data:", error);
                }
            });
        </script>