<%- include("../../views/partials/admin/header2") %>

    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title" style="color: #ffffff;">Add New Product</h2>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="card mb-4">
                    <div class="card-body">
                        <form method="POST" action="/admin/addProducts" enctype="multipart/form-data"
                            onsubmit="return validateForm()" id="productForm">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName"
                                    class="form-control border" id="product_name" required>
                                <div id="productName-error" class="error-message"></div>
                            </div>

                            <!-- Brand Selection -->
                            <div class="col-lg-4 mb-4">
                                <label class="form-label">Brand</label>
                                <select class="form-select border" name="brand">
                                    <% for (let i=0; i < brand.length; i++) { %>
                                        <option value="<%= brand[i].brandName %>">
                                            <%= brand[i].brandName %>
                                        </option>
                                        <% } %>
                                </select>
                                <div id="brand-error" class="error-message"></div>
                            </div>

                            <!-- Size and Color Selection -->
                            <div id="sizeColorContainer">
                                <div class="row mb-4 size-color-group">
                                    <div class="col-lg-4 mb-2">
                                        <label class="form-label">Size</label>
                                        <select class="form-select border" name="sizes[]">
                                            <option value="">Select Size</option>
                                            <option value="ONESIZE">ONESIZE</option>
                                            <option value="S / M">S / M</option>
                                            <option value="M / L">M / L</option>
                                            <option value="L / XL">L / XL</option>
                                            <option value="YOUTH">YOUTH</option>
                                        </select>
                                        <div class="error-message" id="size-error-0"></div>
                                    </div>
                                    <div class="col-lg-4 mb-2">
                                        <label class="form-label">Color</label>
                                        <input name="colors[]" type="text" class="form-control border"
                                            placeholder="Color">
                                        <div class="error-message" id="color-error-0"></div>
                                    </div>
                                    <div class="col-lg-4 mb-2">
                                        <label class="form-label">Quantity</label>
                                        <input name="quantities[]" type="number" class="form-control border"
                                            placeholder="Quantity" min="0">
                                        <div class="error-message" id="quantity-error-0"></div>
                                    </div>
                                    <div class="col-lg-4 mb-2">
                                        <button type="button"
                                            class="btn btn-sm btn-danger remove-variant-btn">Remove</button>
                                    </div>
                                </div>
                            </div>

                            <!-- Button to Add More Sizes/Colors -->
                            <div class="mb-4">
                                <button type="button" id="addSizeColorBtn" class="btn btn-sm btn-primary">Add More
                                    Size/Color</button>
                            </div>

                            <!-- Description -->
                            <div class="mb-4">
                                <label class="form-label">Full Description</label>
                                <textarea placeholder="Type here" id="descriptionid" name="description"
                                    class="form-control border" rows="4"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>

                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular Price</label>
                                        <input name="regularPrice" placeholder="₹" type="text"
                                            class="form-control border">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale Price</label>
                                        <input placeholder="₹" name="salePrice" type="text" class="form-control border">
                                        <div id="salePrice-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-sm-6 mb-3">
                                    <label class="form-label">Category</label>
                                    <select class="form-select border" style="width: 150px;" name="category">
                                        <% for (let i=0; i < cat.length; i++) { %>
                                            <option value="<%= cat[i].name %>">
                                                <%= cat[i].name %>
                                            </option>
                                            <% } %>
                                    </select>
                                    <div id="category-error" class="error-message"></div>
                                </div>
                            </div>

                            <div class="card mb-2">
                                <div class="card-header">
                                    <h4>Choose Images</h4>
                                </div>
                                <div class="border row">
                                    <div id="addedImagesContainer" class="thumbnails-container"></div>
                                </div>
                                <div class="row">
                                    <!-- Image 1 -->
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="" alt="" id="imgView1">
                                        <input class="form-control" type="file" name="images" id="input1"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage1(event), viewImage(event, 1)">
                                        <div id="images-error" class="error-message"></div>
                                    </div>
                                    <!-- Image Cropper for Image 1 -->
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg1" alt="">
                                        <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="" alt="" id="imgView2">
                                        <input class="form-control" type="file" name="images" id="input2"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage2(event), viewImage(event, 2)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg2" alt="">
                                        <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="" alt="" id="imgView3">
                                        <input class="form-control" type="file" name="images" id="input3"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage3(event), viewImage(event, 3)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg3" alt="">
                                        <button type="button" id="saveButton3" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="" alt="" id="imgView4">
                                        <input class="form-control" type="file" name="images" id="input4"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage4(event), viewImage(event, 4)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg4" alt="">
                                        <button type="button" id="saveButton4" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>

                                <!-- Submit Button -->
                                <div class="mb-4">
                                    <button type="submit" class="btn btn-primary">Submit Product</button>
                                </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <%- include("../../views/partials/admin/footer2") %>
        <script>
            let variantIndex = 1; // Start from 1 since 0 is already used

            document.getElementById('addSizeColorBtn').addEventListener('click', function () {
                const container = document.getElementById('sizeColorContainer');
                const newGroup = document.createElement('div');
                newGroup.classList.add('row', 'mb-4', 'size-color-group');
                newGroup.innerHTML = `
            <div class="col-lg-4 mb-2">
                <label class="form-label">Size</label>
                <select class="form-select border" name="sizes[]">
                    <option value="">Select Size</option>
                    <option value="ONESIZE">ONESIZE</option>
                    <option value="S / M">S / M</option>
                    <option value="M / L">M / L</option>
                    <option value="L / XL">L / XL</option>
                    <option value="YOUTH">YOUTH</option>
                </select>
                <div class="error-message" id="size-error-${variantIndex}"></div>
            </div>
            <div class="col-lg-4 mb-2">
                <label class="form-label">Color</label>
                <input name="colors[]" type="text" class="form-control border" placeholder="Color">
                <div class="error-message" id="color-error-${variantIndex}"></div>
            </div>
            <div class="col-lg-4 mb-2">
                <label class="form-label">Quantity</label>
                <input name="quantities[]" type="number" class="form-control border" placeholder="Quantity">
                <div class="error-message" id="quantity-error-${variantIndex}"></div>
            </div>
            <div class="col-lg-4 mb-2">
                <button type="button" class="btn btn-sm btn-danger remove-variant-btn">Remove</button>
            </div>
        `;
                container.appendChild(newGroup);
                variantIndex++;
            });

            document.addEventListener('click', function (event) {
                if (event.target.classList.contains('remove-variant-btn')) {
                    const variantGroup = event.target.closest('.size-color-group');
                    variantGroup.remove();
                }
            });
        </script>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script>
            function validateAndSubmit() {
                if (validateForm()) {
                    document.forms[0].submit();
                }
            }

            function viewImage1(event) {
                document.getElementById("imgView1").src = URL.createObjectURL(event.target.files[0]);
            }
            function viewImage2(event) {
                document.getElementById("imgView2").src = URL.createObjectURL(event.target.files[0]);
            }
            function viewImage3(event) {
                document.getElementById("imgView3").src = URL.createObjectURL(event.target.files[0]);
            }
            function viewImage4(event) {
                document.getElementById("imgView4").src = URL.createObjectURL(event.target.files[0]);
            }

            function viewImage(event, index) {
                const input = event.target;
                const reader = new FileReader();
                reader.onload = function () {
                    const dataURL = reader.result;
                    const image = document.getElementById("imgView" + index);
                    image.src = dataURL;
                    const cropper = new Cropper(image, {
                        aspectRatio: 1,
                        viewMode: 1,
                        guides: true,
                        background: false,
                        autoCropArea: 1,
                        zoomable: true
                    });

                    const cropperContainer = document.querySelector("#croppedImg" + index).parentNode;
                    cropperContainer.style.display = "block";

                    const saveButton = document.querySelector("#saveButton" + index);
                    saveButton.addEventListener("click", async function () {
                        const croppedCanvas = cropper.getCroppedCanvas();
                        const croppedImage = document.getElementById("croppedImg" + index);
                        croppedImage.src = croppedCanvas.toDataURL("image/jpeg", 1.0);

                        const timestamp = new Date().getTime();
                        const fileName = `cropped-img-${timestamp}-${index}.png`;

                        await croppedCanvas.toBlob(blob => {
                            let input = document.getElementById("input" + index);
                            const imgFile = new File([blob], fileName, { type: 'image/png' });
                            const dataTransfer = new DataTransfer()
                            dataTransfer.items.add(imgFile);
                            input.files = dataTransfer.files;
                        });

                        cropperContainer.style.display = "none";
                        cropper.destroy();
                    });
                };

                reader.readAsDataURL(input.files[0]);
            }

            const selectedImages = [];
            document.getElementById("input1").addEventListener("change", handleFileSelect);

            function handleFileSelect(event) {
                const addedImagesContainer = document.getElementById("addedImagesContainer");
                addedImagesContainer.innerHTML = "";
                const files = event.target.files;
                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    selectedImages.push(file);
                    const thumbnail = document.createElement("div");
                    thumbnail.classList.add("thumbnail");

                    const img = document.createElement("img");
                    img.src = URL.createObjectURL(file);
                    img.alt = "thumbnail";
                    img.style.width = "50px";
                    img.style.height = "auto";
                    const removeIcon = document.createElement("span");
                    removeIcon.classList.add("remove-icon");
                    removeIcon.innerHTML = "&times;";
                    removeIcon.addEventListener("click", function () {
                        const index = selectedImages.indexOf(file);
                        if (index !== -1) {
                            selectedImages.splice(index, 1);
                        }
                        thumbnail.remove();
                    });
                    thumbnail.appendChild(img);
                    thumbnail.appendChild(removeIcon);
                    addedImagesContainer.appendChild(thumbnail);
                }
            }

          function validateForm() {
                clearErrorMessages();
                const name = document.getElementsByName('productName')[0].value;
                const description = document.getElementById('descriptionid').value;
                const brand = document.getElementsByName('brand')[0].value;
                const price = document.getElementsByName('regularPrice')[0].value;
                const saleprice = document.getElementsByName('salePrice')[0].value;
                const category = document.getElementsByName('category')[0].value;
                let isValid = true;

                // Existing Field Validations
                if (name.trim() === "") {
                    displayErrorMessage('productName-error', 'Please enter a product name.');
                    isValid = false;
                }

                if (description.trim() === "") {
                    displayErrorMessage('description-error', 'Please enter a product description.');
                    isValid = false;
                }

                if (brand === "") {
                    displayErrorMessage('brand-error', 'Please select a brand.');
                    isValid = false;
                }

                if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
                    displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
                    isValid = false;
                }

                if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
                    displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
                    isValid = false;
                }

                if (parseFloat(price) <= parseFloat(saleprice)) {
                    displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
                    isValid = false;
                }

                if (category === "") {
                    displayErrorMessage('category-error', 'Please select a category.');
                    isValid = false;
                }

                // Size, Color, Quantity Validation
                const sizeColorGroups = document.querySelectorAll('.size-color-group');
                sizeColorGroups.forEach((group, index) => {
                    const size = group.querySelector('select[name="sizes[]"]').value;
                    const color = group.querySelector('input[name="colors[]"]').value;
                    const quantity = group.querySelector('input[name="quantities[]"]').value;

                    if (size === "") {
                        displayErrorMessage(`size-error-${index}`, 'Please select a size.');
                        isValid = false;
                    }
                    if (color.trim() === "") {
                        displayErrorMessage(`color-error-${index}`, 'Please enter a color.');
                        isValid = false;
                    }
                    if (quantity.trim() === "" || parseInt(quantity) < 0) {
                        displayErrorMessage(`quantity-error-${index}`, 'Please enter a valid quantity.');
                        isValid = false;
                    }
                });

                // Image Validation
                const imageInputs = [
                    document.getElementById('input1'),
                    document.getElementById('input2'),
                    document.getElementById('input3'),
                    document.getElementById('input4')
                ];

                const filledImageInputs = imageInputs.filter(input => input.files.length > 0);
                if (filledImageInputs.length !== 4) {
                    displayErrorMessage("images-error", "Please upload all 4 product images.");
                    isValid = false;
                } else {
                    imageInputs.forEach((input, index) => {
                        const file = input.files[0];
                        const validImageTypes = ['image/jpeg', 'image/png', 'image/jpg'];
                        const maxFileSize = 5 * 1024 * 1024;

                        if (!validImageTypes.includes(file.type)) {
                            displayErrorMessage("images-error", `Invalid image type for Image ${index + 1}. Only JPEG, PNG, and JPG are allowed.`);
                            isValid = false;
                            return;
                        }

                        if (file.size > maxFileSize) {
                            displayErrorMessage("images-error", `Image ${index + 1} size should be less than 5MB.`);
                            isValid = false;
                            return;
                        }
                    });
                }

                return isValid;
            }
            function displayErrorMessage(elementId, message) {
                var errorElement = document.getElementById(elementId);
                errorElement.innerText = message;
                errorElement.style.display = "block";
            }

            function clearErrorMessages() {
                const errorElements = document.getElementsByClassName('error-message');
                Array.from(errorElements).forEach(element => {
                    element.innerText = '';
                    element.style.display = "none"; // Hide error messages
                });
            }
          document.getElementById('productForm').addEventListener('submit', async (e) => {
                e.preventDefault(); // Prevent default form submission

                // First, run form validation
                if (!validateForm()) {
                    return; // Stop if validation fails
                }

                const formData = new FormData(e.target);

                try {
                    const response = await fetch('/admin/addProducts', {
                        method: 'POST',
                        body: formData
                    });

                    // Log full response for debugging
                    console.log('Full Response:', response);

                    // Parse the JSON response
                    const result = await response.json();
                    console.log('Parsed Result:', result);

                    // Check if response is successful
                    if (response.ok && result.success) {
                        // SweetAlert Success
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: result.message || 'Product added successfully',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            // Redirect after confirmation
                            window.location.href = '/admin/products';
                        });
                    } else {
                        // SweetAlert Error
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.message || 'Something went wrong',
                            confirmButtonText: 'Try Again'
                        });
                    }
                } catch (error) {
                    // Comprehensive error handling
                    console.error('Submission Error:', error);

                    Swal.fire({
                        icon: 'error',
                        title: 'Submission Error',
                        text: error.message || 'Unable to submit product',
                        confirmButtonText: 'OK'
                    });
                }
            });
            // Handle logout action with fetch
            document.getElementById('logoutLink').addEventListener('click', function (event) {
                event.preventDefault(); // Prevent the default link behavior

                // Send fetch request to logout
                fetch('/admin/logout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ action: 'logout' })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Show success SweetAlert
                            Swal.fire({
                                icon: 'success',
                                title: 'Logged Out',
                                text: data.message, // Message from the backend
                                timer: 2000, // Wait for 2 seconds before redirect
                                showConfirmButton: false // Hide the confirm button
                            }).then(() => {
                                // Redirect after showing SweetAlert
                                window.location.replace('/admin/login');
                            });
                        } else {
                            // If logout failed, show an error SweetAlert
                            Swal.fire({
                                icon: 'error',
                                title: 'Logout Failed',
                                text: data.message, // Message from the backend
                                confirmButtonText: 'Try Again'
                            });
                        }
                    })
                    .catch(error => {
                        // Handle any network errors
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred. Please try again later.',
                            confirmButtonText: 'Okay'
                        });
                    });
            });
        </script>

 