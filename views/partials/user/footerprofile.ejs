</div>
</div>
</div>
</div>
</div>
</div>
</section>
</main>
<div class="container-fluid crownify4 d-flex justify-content-center align-items-center">
    <img src="assets/images/logo/Crownify_logo_text.png" class="custom-logo">

</div>


<footer id="footer" class="footer-5">
    <div class="site-footer">
        <div class="container">
            <!--Footer Links-->
            <div class="footer-top">
                <div class="row">
                    <div class="col-12 col-sm-12 col-md-3 col-lg-3 footer-links">
                        <h4 class="h4">Informations</h4>
                        <ul>
                            <li><a href="#">About us</a></li>
                            <li><a href="#">Careers</a></li>
                            <li><a href="#">Privacy policy</a></li>
                            <li><a href="#">Terms &amp; condition</a></li>
                            <li><a href="#">My Account</a></li>
                        </ul>
                    </div>
                    <div class="col-12 col-sm-12 col-md-3 col-lg-3 footer-links">
                        <h4 class="h4">Customer Services</h4>
                        <ul>
                            <li><a href="#">Request Personal Data</a></li>
                            <li><a href="#">FAQ's</a></li>
                            <li><a href="#">Contact Us</a></li>
                            <li><a href="#">Orders and Returns</a></li>
                            <li><a href="#">Support Center</a></li>
                        </ul>
                    </div>
                    <div class="col-12 col-sm-12 col-md-3 col-lg-3">
                        <div class="display-table">
                            <div class="display-table-cell footer-newsletter">
                                <form action="#" method="post">
                                    <label class="h4">Newsletter</label>
                                    <p>Be the first to hear about new trending and offers and see how you've helped.</p>
                                    <div class="input-group">
                                        <input type="email" class="input-group__field newsletter__input" name="EMAIL"
                                            value="" placeholder="Email address" required="">
                                        <span class="input-group__btn">
                                            <button type="submit" class="btn newsletter__submit" name="commit"
                                                id="Subscribe"><span
                                                    class="newsletter__submit-text--large">Subscribe</span></button>
                                        </span>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-sm-12 col-md-3 col-lg-3 contact-box">
                        <h4 class="h4">About Us</h4>
                        <p>Belle â€“ Responsive eCommerce Html Template with clean &amp; modern design for your online
                            fashion store and other web shop.</p>
                        <ul class="addressFooter">
                            <li class="email"><i class="icon anm anm-envelope-l"></i>
                                <p>sales@yousite.com</p>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <!--End Footer Links-->
            <hr>
            <div class="footer-bottom">
                <div class="row">
                    <!--Footer Copyright-->
                    <div
                        class="col-12 col-sm-12 col-md-6 col-lg-6 order-1 order-md-0 order-lg-0 order-sm-1 copyright text-sm-center text-md-left text-lg-left">
                        <span></span> <a href="templateshub.net">Templates Hub</a>
                    </div>
                    <!--End Footer Copyright-->
                    <!--Footer Payment Icon-->
                    <div
                        class="col-12 col-sm-12 col-md-6 col-lg-6 order-0 order-md-1 order-lg-1 order-sm-0 payment-icons text-right text-md-center">
                        <img src="assets/images/safepayment.png" alt="Payment">
                    </div>
                    <!--End Footer Payment Icon-->
                </div>
            </div>
        </div>
    </div>
</footer>
<span id="site-scroll"><i class="icon anm anm-angle-up-r"></i></span>
<script>
    function confirmPrimaryAddress(event, addressId) {
        event.preventDefault();
        console.log("Function called with addressId:", addressId); // Debug log

        Swal.fire({
            title: 'Set as Primary Address?',
            text: 'Do you want to set this as your primary address?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Yes, set it!',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/set-primary-address/${addressId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'same-origin'  // Important for sessions
                })
                    .then(async response => {
                        console.log("Response status:", response.status); // Debug log

                        if (!response.ok) {
                            const text = await response.text();
                            console.log("Error response body:", text); // Debug log
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log("Success response:", data); // Debug log
                        if (data.success) {
                            Swal.fire({
                                title: 'Success!',
                                text: 'Primary address updated successfully.',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            Swal.fire({
                                title: 'Failed!',
                                text: data.message || 'Failed to update primary address.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            title: 'Error!',
                            text: 'An error occurred while updating primary address. Please try again.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    });
            }
        });
    }

    function confirmDeleteAddress(event, addressId) {
        event.preventDefault();

        Swal.fire({
            title: 'Delete Address?',
            text: 'Are you sure you want to delete this address?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/delete-address/${addressId}`, {
                    method: 'POST',
                    headers: {
                        // Add CSRF token if you're using it
                        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content,
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Deleted!',
                                text: 'Address deleted successfully.',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                const addressCard = event.target.closest('.col-lg-6');
                                if (addressCard) {
                                    addressCard.remove();
                                    // checkAndUpdateAddressDisplay();
                                }
                            });
                        } else {
                            Swal.fire({
                                title: 'Failed!',
                                text: data.message || 'Failed to delete address.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            title: 'Error!',
                            text: 'An error occurred while deleting the address. Please try again.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    });
            }
        });
    }
    function editAddress(event, addressId) {
        event.preventDefault();
        const updatedData = {
            flatHouseCompany: document.querySelector('#flatHouseCompany').value,
            areaStreet: document.querySelector('#areaStreet').value,
            city: document.querySelector('#city').value,
            state: document.querySelector('#state').value,
            postalCode: document.querySelector('#postalCode').value,
            country: document.querySelector('#country').value,
            mobileNumber: document.querySelector('#mobileNumber').value,
            additionalInfo: document.querySelector('#additionalInfo').value,
        };

        fetch(`/edit-address/${addressId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                // Add any necessary authentication headers here
            },
            body: JSON.stringify(updatedData)
        })
            .then(response => {
                if (response.ok) {
                    // Handle successful response (e.g., refresh the page or update the UI)
                    window.location.reload(); // Reload to reflect changes
                } else {
                    throw new Error('Failed to edit address');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire('Error', 'Failed to edit address', 'error');
            });
    }
</script>

<script>
    document.getElementById('name').addEventListener('input', function () {
        const name = this.value.trim();
        const nameError = document.getElementById('nameError');
        const regex = /^[A-Za-z\s]+$/;

        if (name === '') {
            nameError.textContent = 'Name cannot be blank';
        } else if (name.length < 3) {
            nameError.textContent = 'Name must be at least 3 characters long';
        } else if (!regex.test(name)) {
            nameError.textContent = 'Name must only contain letters and spaces';
        } else {
            nameError.textContent = '';
        }
    });

    // Real-time validation for the phone number
    document.getElementById('phone').addEventListener('input', function () {
        const phone = this.value.trim();
        const phoneError = document.getElementById('phoneError');

        if (!/^\d{10}$/.test(phone)) {
            phoneError.textContent = 'Please enter a valid 10-digit phone number';
        } else {
            phoneError.textContent = '';
        }
    });

    // Real-time validation for the current password
    document.getElementById('password').addEventListener('input', async function () {
        const password = this.value;
        const passwordError = document.getElementById('passwordError');
        const npasswordField = document.getElementById('npassword');
        const cpasswordField = document.getElementById('cpassword');

        if (password.length < 8) {
            passwordError.textContent = 'Current password must be at least 8 characters long';
            npasswordField.disabled = true; // Disable new password fields
            cpasswordField.disabled = true;
        } else {
            passwordError.textContent = '';

            // Validate current password with the backend
            try {
                const response = await fetch('/validate-current-password', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ password }) // Send the current password to validate
                });
                const result = await response.json();
                if (result.valid) {
                    npasswordField.disabled = false; // Enable new password fields
                    cpasswordField.disabled = false;
                } else {
                    npasswordField.disabled = true; // Disable new password fields
                    cpasswordField.disabled = true;
                    passwordError.textContent = 'Incorrect current password'; // Show error if password is incorrect
                }
            } catch (error) {
                console.error('Error validating password:', error);
                passwordError.textContent = 'Error validating password. Please try again.';
            }
        }
    });

    // Real-time validation for the new password
    document.getElementById('npassword').addEventListener('input', function () {
        const npassword = this.value;
        const cpassword = document.getElementById('cpassword').value;
        const newPasswordError = document.getElementById('newPasswordError');

        if (npassword.length < 8) {
            newPasswordError.textContent = 'New password must be at least 8 characters long';
        } else if (npassword !== cpassword) {
            newPasswordError.textContent = 'Passwords do not match';
        } else {
            newPasswordError.textContent = '';
        }
    });

    // Real-time validation for the confirm password
    document.getElementById('cpassword').addEventListener('input', function () {
        const cpassword = this.value;
        const npassword = document.getElementById('npassword').value;
        const confirmPasswordError = document.getElementById('confirmPasswordError');

        if (cpassword !== npassword) {
            confirmPasswordError.textContent = 'Passwords do not match';
        } else {
            confirmPasswordError.textContent = '';
        }
    });

    // Form submission logic
    document.getElementById('updateForm').addEventListener('submit', async function (e) {
        e.preventDefault(); // Prevent the default form submission

        // Check for validation errors
        const errors = document.querySelectorAll('.error-message');
        let hasErrors = false;

        errors.forEach(error => {
            if (error.textContent !== '') {
                hasErrors = true;
            }
        });

        if (hasErrors) {
            Swal.fire({
                icon: 'error',
                title: 'Validation Error',
                text: 'Please fix the errors before submitting.',
            });
            return; // Stop form submission
        }

        // If no errors, proceed with form submission
        const name = document.getElementById('name').value.trim();
        const phone = document.getElementById('phone').value.trim();
        const password = document.getElementById('password').value;
        const npassword = document.getElementById('npassword').value;

        try {
            const response = await fetch('/update-user', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name, phone, password, npassword }),
            });

            const result = await response.json();
            if (result.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'User  details updated successfully!',
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: result.error || 'Error updating user details.',
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Something went wrong. Please try again later.',
            });
        }
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const cartLinks = document.querySelectorAll('.site-header__cart');

        cartLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                console.log('Cart link clicked');

                // Prevent any existing event handlers
                e.stopPropagation();

                // Ensure default navigation
                window.location.href = '/cart';

                // Prevent default link behavior
                e.preventDefault();
            });
        });
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const changePictureBtn = document.querySelector(".change-picture-btn");
        const avatarUpload = document.getElementById("avatar-upload");
        const cropModal = document.getElementById("crop-modal");
        const cropImage = document.getElementById("crop-image");
        const cropSaveBtn = document.getElementById("crop-save-btn");
        const cropCancelBtn = document.getElementById("crop-cancel-btn");
        const closeModalBtn = document.getElementById("close-modal-btn");
        let cropper;

        // Trigger file upload dialog
        changePictureBtn.addEventListener("click", () => {
            avatarUpload.click();
        });

        // Initialize Cropper.js on image select
        avatarUpload.addEventListener("change", (e) => {
            const file = e.target.files[0];
            if (file) {
                if (!file.type.startsWith('image/')) {
                    alert('Please upload an image file');
                    return;
                }

                const reader = new FileReader();
                reader.onload = function (event) {
                    cropImage.src = event.target.result;
                    cropModal.style.display = "block";

                    // Destroy existing cropper instance if it exists
                    if (cropper) {
                        cropper.destroy();
                    }

                    // Initialize new cropper
                    cropper = new Cropper(cropImage, {
                        aspectRatio: 1,
                        viewMode: 1,
                        dragMode: 'move',
                        autoCropArea: 0.8,
                        restore: false,
                        guides: true,
                        center: true,
                        highlight: false,
                        cropBoxMovable: true,
                        cropBoxResizable: true,
                        toggleDragModeOnDblclick: false,
                    });
                };
                reader.readAsDataURL(file);
            }
        });

        // Save cropped image
        cropSaveBtn.addEventListener("click", async () => {
            try {
                if (!cropper) {
                    throw new Error('No image to crop');
                }

                const canvas = cropper.getCroppedCanvas({
                    width: 300,  // Set desired dimensions
                    height: 300,
                    imageSmoothingEnabled: true,
                    imageSmoothingQuality: 'high',
                });

                const blob = await new Promise(resolve => {
                    canvas.toBlob(resolve, 'image/jpeg', 0.8);
                });

                const formData = new FormData();
                formData.append('avatar', blob, 'avatar.jpg');

                const response = await fetch('/upload-avatar', {
                    method: 'POST',
                    body: formData,
                    credentials: 'same-origin'
                });

                const data = await response.json();

                if (data.success) {
                    // Update avatar preview
                    const avatar = document.querySelector('.avatar');
                    avatar.style.backgroundImage = `url(${data.avatarUrl}?${new Date().getTime()})`;
                    avatar.textContent = ''; // Clear any initial letter

                    // Close modal and cleanup
                    closeModal();

                    // Show success message
                    Swal.fire({
                        title: 'Success!',
                        text: 'Profile picture updated successfully',
                        icon: 'success',
                        confirmButtonText: 'OK'
                    });
                } else {
                    throw new Error(data.message || 'Failed to upload avatar');
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to update profile picture. Please try again.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        });

        // Function to close modal and cleanup
        function closeModal() {
            cropModal.style.display = "none";
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
            cropImage.src = '';
            avatarUpload.value = ''; // Reset file input
        }

        // Close modal handlers
        cropCancelBtn.addEventListener("click", closeModal);
        closeModalBtn.addEventListener("click", closeModal);
    });
</script>


<!-- Including Jquery -->
<script src="assets/js/vendor/jquery-3.3.1.min.js"></script>
<script src="assets/js/vendor/modernizr-3.6.0.min.js"></script>
<script src="assets/js/vendor/jquery.cookie.js"></script>
<script src="assets/js/vendor/wow.min.js"></script>
<script src="assets/js/vendor/instagram-feed.js"></script>
<!-- Including Javascript -->
<script src="assets/js/bootstrap.min.js"></script>
<script src="assets/js/plugins.js"></script>
<script src="assets/js/popper.min.js"></script>
<script src="assets/js/lazysizes.js"></script>
<script src="assets/js/main.js"></script>
<!--Instagram Js-->
<script src="assets/js/jquery2.min.js"></script>
<script src="assets/js/popper2.js"></script>
<script src="assets/js/bootstrap2.min.js"></script>
<script src="assets/js/main2.js"></script>


<!-- //second file -->

<!-- Vendor JS-->
<!--  -->
<!-- Template  JS -->
<!-- <script src="assets2/js/main.js?v=3.4"></script> -->

<!-- <script>
    var userFeed = new Instafeed({
        get: 'user',
        userId: '8983165779',
        accessToken: '8983165779.1677ed0.f3242e4ff60b428a81c25d118e02f44f',
        resolution: 'low_resolution',
        sortBy: 'most-recent',
        limit: 8,
        template: '<div class="insta-img"><a href="{{link}}" target="_blank"><img src="{{image}}" /></a></div>',
    });
    userFeed.run();
</script> -->
<!--End Instagram Js-->
<!--For Newsletter Popup-->
<!-- <script>
    jQuery(document).ready(function () {
        jQuery('.closepopup').on('click', function () {
            jQuery('#popup-container').fadeOut();
            jQuery('#modalOverly').fadeOut();
        });

        var visits = jQuery.cookie('visits') || 0;
        visits++;
        jQuery.cookie('visits', visits, { expires: 1, path: '/' });
        console.debug(jQuery.cookie('visits'));
        if (jQuery.cookie('visits') > 1) {
            jQuery('#modalOverly').hide();
            jQuery('#popup-container').hide();
        } else {
            var pageHeight = jQuery(document).height();
            jQuery('<div id="modalOverly"></div>').insertBefore('body');
            jQuery('#modalOverly').css("height", pageHeight);
            jQuery('#popup-container').show();
        }
        if (jQuery.cookie('noShowWelcome')) { jQuery('#popup-container').hide(); jQuery('#active-popup').hide(); }
    });

    jQuery(document).mouseup(function (e) {
        var container = jQuery('#popup-container');
        if (!container.is(e.target) && container.has(e.target).length === 0) {
            container.fadeOut();
            jQuery('#modalOverly').fadeIn(200);
            jQuery('#modalOverly').hide();
        }
    });
</script> -->
<!--End For Newsletter Popup-->
</div>
</body>

<!-- belle/home12-category.html   11 Nov 2019 12:33:20 GMT -->

</html>