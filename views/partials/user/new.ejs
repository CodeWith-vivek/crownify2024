<script>
    const timerElement = document.getElementById('timer');
    const verifyOtpButton = document.getElementById('verifyOtp');
    const otpInputs = document.querySelectorAll('.otp-input');
    const resendButton = document.getElementById('resendOtp');
    const currentEmail = document.getElementById('user-email').value;

    // Default countdown time
    countdownTime = <%= countdownTime %>;
    let intervalId;

    // Load countdown time from localStorage if available
    function loadCountdownTime() {
        const savedTime = localStorage.getItem('countdownTime');
        if (savedTime) {
            countdownTime = parseInt(savedTime, 10);
        }
    }

    // Save countdown time to localStorage
    function saveCountdownTime() {
        localStorage.setItem('countdownTime', countdownTime);
    }

    // Clear countdown time from localStorage
    function clearCountdownTime() {
        localStorage.removeItem('countdownTime');
    }

    function formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }

    function updateTimerDisplay() {
        timerElement.innerHTML = formatTime(countdownTime) + ' Sec';
        resendButton.style.pointerEvents = countdownTime > 0 ? 'none' : 'auto';
    }

    function startCountdown() {
        updateTimerDisplay(); // Update the display immediately
        intervalId = setInterval(() => {
            countdownTime--;
            saveCountdownTime(); // Save the remaining time
            updateTimerDisplay(); // Update the display on each tick

            if (countdownTime <= 0) {
                clearInterval(intervalId);
                displayTimerExpired();
            }
        }, 1000);
    }

    function displayTimerExpired() {
        timerElement.style.color = 'red';
        timerElement.innerHTML = 'Timer Expired';
          timerElement.style.fontSize = '20px';
        otpInputs.forEach(input => input.disabled = true);
    }

    function resetOtpInputs() {
        otpInputs.forEach(input => {
            input.disabled = false;
            input.value = '';
        });
        otpInputs[0].focus();
    }
     function disableOtpInputs() {
            otpInputs.forEach(input => {
                input.disabled = true;
            });
        }
         function enableOtpInputs() {
                otpInputs.forEach(input => {
                    input.disabled = false;
                });
            }
            function moveToNext(current, nextFieldID) {
                    if (current.value.length === 1 && !isNaN(current.value)) {
                        document.getElementById(nextFieldID).focus();
                    } else {
                        current.value = '';
                    }
                }
                function moveToPrev(current, prevFieldID, event) {
                        if (event.key === 'Backspace' && current.value.length === 0) {
                            document.getElementById(prevFieldID).focus();
                        }
                    }
                     otpInputs.forEach(input => {
                            input.addEventListener('input', (e) => {
                                if (!/^\d*$/.test(e.target.value)) {
                                    e.target.value = '';
                                }
                            });
                        });

    // Load the countdown time when the script loads
    loadCountdownTime();
    startCountdown();

    // Event listener for verifying OTP
    verifyOtpButton.addEventListener('click', () => {
        let otpCode = '';
        otpInputs.forEach(input => otpCode += input.value);

        if (otpCode.length === 6) {
            fetch('/verify-otp', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ otp: otpCode })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Clear any stored countdown time
                        clearCountdownTime();
                        sessionStorage.setItem('signupComplete', 'true');

                        Swal.fire({
                            icon: 'success',
                            title: 'OTP Verified',
                            text: 'Your OTP has been verified successfully logging in.',
                            confirmButtonText: 'Continue',
                            customClass: {
                                popup: 'animated bounceIn'
                            }
                        }).then(() => {
                            window.location.replace(data.redirectUrl || '/');
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Invalid OTP',
                            text: 'Please check the OTP and try again.',
                            customClass: {
                                popup: 'animated shake'
                            }
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while verifying the OTP. Please try again later.',
                    });
                });
        } else {
            Swal.fire('Please enter the full 6-digit OTP.');
        }
    });
      document.addEventListener('DOMContentLoaded', function () {
            if (sessionStorage.getItem('signupComplete') === 'true') {
                window.location.replace('/');
            }
        });

        // Clear signup completion flag on logout
        window.addEventListener('beforeunload', function () {
            if (window.location.pathname === '/logout') {
                sessionStorage.removeItem('signupComplete');
            }
        });


    // Resend OTP // functionality
    resendButton.onclick = () => {
        if (countdownTime > 0) return; // Don't allow resend if timer is still active
        countdownTime = 120; // Reset countdown to 120 seconds
        timerElement.style.color = 'gray';
        timerElement.style.fontSize = "14px";
         saveCountdownTime();
        resetOtpInputs();
        startCountdown(); // Start the countdown again

        fetch('/resend-otp', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'info',
                        title: 'OTP Resent',
                        text: 'A new OTP has been sent to your email.',
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to resend OTP. Please try again.',
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while resending the OTP. Please try again later.',
                });
            });
    };

    // Additional event listeners and functions can be added here as needed
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const changePictureBtn = document.querySelector(".change-picture-btn");
        const avatarUpload = document.getElementById("avatar-upload");
        const cropModal = document.getElementById("crop-modal");
        const cropImage = document.getElementById("crop-image");
        const cropSaveBtn = document.getElementById("crop-save-btn");
        const cropCancelBtn = document.getElementById("crop-cancel-btn");
        const closeModalBtn = document.getElementById("close-modal-btn");
        let cropper;

        // Trigger file upload dialog
        changePictureBtn.addEventListener("click", () => {
            avatarUpload.click();
        });

        // Initialize Cropper.js on image select
        avatarUpload.addEventListener("change", (e) => {
            const file = e.target.files[0];
            if (file) {
                if (!file.type.startsWith('image/')) {
                    alert('Please upload an image file');
                    return;
                }

                const reader = new FileReader();
                reader.onload = function (event) {
                    cropImage.src = event.target.result;
                    cropModal.style.display = "block";

                    // Destroy existing cropper instance if it exists
                    if (cropper) {
                        cropper.destroy();
                    }

                    // Initialize new cropper
                    cropper = new Cropper(cropImage, {
                        aspectRatio: 1,
                        viewMode: 1,
                        dragMode: 'move',
                        autoCropArea: 0.8,
                        restore: false,
                        guides: true,
                        center: true,
                        highlight: false,
                        cropBoxMovable: true,
                        cropBoxResizable: true,
                        toggleDragModeOnDblclick: false,
                    });
                };
                reader.readAsDataURL(file);
            }
        });

        // Save cropped image
        cropSaveBtn.addEventListener("click", async () => {
            try {
                if (!cropper) {
                    throw new Error('No image to crop');
                }

                const canvas = cropper.getCroppedCanvas({
                    width: 300,  // Set desired dimensions
                    height: 300,
                    imageSmoothingEnabled: true,
                    imageSmoothingQuality: 'high',
                });

                const blob = await new Promise(resolve => {
                    canvas.toBlob(resolve, 'image/jpeg', 0.8);
                });

                const formData = new FormData();
                formData.append('avatar', blob, 'avatar.jpg');

                const response = await fetch('/upload-avatar', {
                    method: 'POST',
                    body: formData,
                    credentials: 'same-origin'
                });

                const data = await response.json();

                if (data.success) {
                    // Update avatar preview
                    const avatar = document.querySelector('.avatar');
                    avatar.style.backgroundImage = `url(${data.avatarUrl}?${new Date().getTime()})`;
                    avatar.textContent = ''; // Clear any initial letter

                    // Close modal and cleanup
                    closeModal();

                    // Show success message
                    Swal.fire({
                        title: 'Success!',
                        text: 'Profile picture updated successfully',
                        icon: 'success',
                        confirmButtonText: 'OK'
                    });
                } else {
                    throw new Error(data.message || 'Failed to upload avatar');
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to update profile picture. Please try again.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        });

        // Function to close modal and cleanup
        function closeModal() {
            cropModal.style.display = "none";
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
            cropImage.src = '';
            avatarUpload.value = ''; // Reset file input
        }

        // Close modal handlers
        cropCancelBtn.addEventListener("click", closeModal);
        closeModalBtn.addEventListener("click", closeModal);
    });
</script>